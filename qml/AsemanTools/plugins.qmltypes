import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -nonrelocatable AsemanTools 1.1'

Module {
    dependencies: [
        "AsemanTools.Awesome 1.0",
        "AsemanTools.MaterialIcons 1.0",
        "Qt.labs.folderlistmodel 2.1",
        "Qt.labs.settings 1.0",
        "QtGraphicalEffects 1.0",
        "QtMultimedia 5.9",
        "QtQml.Models 2.2",
        "QtQuick 2.9",
        "QtQuick.Controls 2.2",
        "QtQuick.Controls.Material 2.2",
        "QtQuick.Controls.Material.impl 2.2",
        "QtQuick.Controls.Styles 1.4",
        "QtQuick.Controls.Universal 2.2",
        "QtQuick.Controls.Universal.impl 2.2",
        "QtQuick.Controls.impl 2.2",
        "QtQuick.Dialogs 1.2",
        "QtQuick.Extras 1.4",
        "QtQuick.Layouts 1.2",
        "QtQuick.Templates 2.2",
        "QtQuick.Window 2.3",
        "QtQuick.XmlListModel 2.0"
    ]
    Component {
        name: "AsemanAbstractListModel"
        prototype: "QAbstractListModel"
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "roleName"; type: "string" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "roles"; type: "QStringList" }
    }
    Component {
        name: "AsemanApplication"
        defaultProperty: "items"
        prototype: "AsemanQuickObject"
        exports: [
            "AsemanTools/AsemanApp 1.0",
            "AsemanTools/AsemanApplicationBase 1.0"
        ]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0, 0]
        Enum {
            name: "ApplicationType"
            values: {
                "NoneApplication": 0,
                "GuiApplication": 1,
                "CoreApplication": 2,
                "WidgetApplication": 3
            }
        }
        Enum {
            name: "ApplicationState"
            values: {
                "ApplicationSuspended": 0,
                "ApplicationHidden": 1,
                "ApplicationInactive": 2,
                "ApplicationActive": 4
            }
        }
        Property { name: "homePath"; type: "string"; isReadonly: true }
        Property { name: "startPath"; type: "string"; isReadonly: true }
        Property { name: "appPath"; type: "string"; isReadonly: true }
        Property { name: "appFilePath"; type: "string"; isReadonly: true }
        Property { name: "logPath"; type: "string" }
        Property { name: "confsPath"; type: "string"; isReadonly: true }
        Property { name: "tempPath"; type: "string"; isReadonly: true }
        Property { name: "backupsPath"; type: "string"; isReadonly: true }
        Property { name: "cameraPath"; type: "string"; isReadonly: true }
        Property { name: "appType"; type: "int"; isReadonly: true }
        Property { name: "isDebug"; type: "bool"; isReadonly: true }
        Property { name: "globalFont"; type: "QFont" }
        Property { name: "applicationName"; type: "string" }
        Property { name: "applicationVersion"; type: "string" }
        Property { name: "organizationName"; type: "string" }
        Property { name: "organizationDomain"; type: "string" }
        Property { name: "applicationAbout"; type: "string" }
        Property { name: "applicationId"; type: "string" }
        Property { name: "windowIcon"; type: "QUrl" }
        Property { name: "applicationState"; type: "int"; isReadonly: true }
        Property { name: "isRunning"; type: "bool"; isReadonly: true }
        Property { name: "applicationDisplayName"; type: "string" }
        Property { name: "platformName"; type: "string"; isReadonly: true }
        Property { name: "quitOnLastWindowClosed"; type: "bool" }
        Signal { name: "fakeSignal" }
        Signal { name: "globalFontFamilyChanged" }
        Signal { name: "globalMonoFontFamilyChanged" }
        Signal { name: "languageUpdated" }
        Signal { name: "backRequest" }
        Signal { name: "clickedOnDock" }
        Signal { name: "lastWindowClosed" }
        Signal {
            name: "messageReceived"
            Parameter { name: "msg"; type: "string" }
        }
        Method { name: "refreshTranslations" }
        Method { name: "back" }
        Method { name: "exec"; type: "int" }
        Method {
            name: "exit"
            Parameter { name: "retcode"; type: "int" }
        }
        Method { name: "exit" }
        Method {
            name: "sleep"
            Parameter { name: "ms"; type: "qulonglong" }
        }
        Method {
            name: "sendMessage"
            Parameter { name: "msg"; type: "string" }
        }
        Method {
            name: "requestPermissions"
            type: "QVariantMap"
            Parameter { name: "persmissions"; type: "QStringList" }
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "setSetting"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "readSetting"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "readSetting"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "AsemanAudioEncoderSettings"
        prototype: "QObject"
        exports: ["AsemanTools/AudioEncoderSettings 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "EncodingQuality"
            values: {
                "VeryLowQuality": 0,
                "LowQuality": 1,
                "NormalQuality": 2,
                "HighQuality": 3,
                "VeryHighQuality": 4
            }
        }
        Enum {
            name: "EncodingMode"
            values: {
                "ConstantQualityEncoding": 0,
                "ConstantBitRateEncoding": 1,
                "AverageBitRateEncoding": 2,
                "TwoPassEncoding": 3
            }
        }
        Property { name: "bitRate"; type: "int" }
        Property { name: "channelCount"; type: "int" }
        Property { name: "codec"; type: "string" }
        Property { name: "encodingMode"; type: "int" }
        Property { name: "encodingOptions"; type: "QVariantMap" }
        Property { name: "quality"; type: "int" }
        Property { name: "sampleRate"; type: "int" }
    }
    Component {
        name: "AsemanAudioRecorder"
        prototype: "QObject"
        exports: ["AsemanTools/AudioRecorder 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "State"
            values: {
                "StoppedState": 0,
                "RecordingState": 1,
                "PausedState": 2
            }
        }
        Enum {
            name: "Status"
            values: {
                "UnavailableStatus": 0,
                "UnloadedStatus": 1,
                "LoadingStatus": 2,
                "LoadedStatus": 3,
                "StartingStatus": 4,
                "RecordingStatus": 5,
                "PausedStatus": 6,
                "FinalizingStatus": 7
            }
        }
        Property { name: "encoderSettings"; type: "AsemanAudioEncoderSettings"; isPointer: true }
        Property { name: "output"; type: "QUrl" }
        Property { name: "mute"; type: "bool" }
        Property { name: "available"; type: "bool"; isReadonly: true }
        Property { name: "availability"; type: "int"; isReadonly: true }
        Property { name: "state"; type: "int"; isReadonly: true }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "volume"; type: "double" }
        Property { name: "audioInput"; type: "string" }
        Property { name: "audioInputs"; type: "QStringList"; isReadonly: true }
        Method { name: "stop" }
        Method { name: "pause" }
        Method { name: "record" }
    }
    Component {
        name: "AsemanAutoStartManager"
        prototype: "QObject"
        exports: ["AsemanTools/AutoStartManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "command"; type: "string" }
        Property { name: "comment"; type: "string" }
        Property { name: "source"; type: "string" }
        Property { name: "name"; type: "string" }
        Property { name: "type"; type: "string" }
        Property { name: "active"; type: "bool" }
        Method { name: "refresh" }
        Method { name: "save" }
    }
    Component {
        name: "AsemanBackHandler"
        prototype: "QObject"
        exports: ["AsemanTools/BackHandler 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "topHandlerObject"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "topHandlerMethod"; type: "QJSValue"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "topHandlerChanged" }
        Signal { name: "backFinished" }
        Method {
            name: "pushHandler"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "jsv"; type: "QJSValue" }
        }
        Method {
            name: "pushDownHandler"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "jsv"; type: "QJSValue" }
        }
        Method {
            name: "removeHandler"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
        Method { name: "tryPopHandler"; type: "QObject*" }
        Method { name: "forcePopHandler"; type: "QObject*" }
        Method { name: "clear" }
        Method { name: "back"; type: "bool" }
    }
    Component {
        name: "AsemanCalendarConverter"
        prototype: "QObject"
        exports: ["AsemanTools/CalendarConv 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "calendar"; type: "int" }
        Property { name: "calendarsID"; type: "QStringList"; isReadonly: true }
        Property { name: "currentDays"; type: "int"; isReadonly: true }
        Property { name: "currentYear"; type: "int"; isReadonly: true }
        Property { name: "currentMonth"; type: "int"; isReadonly: true }
        Property { name: "currentDay"; type: "int"; isReadonly: true }
        Signal { name: "fakeSignal" }
        Method {
            name: "calendarName"
            type: "string"
            Parameter { name: "t"; type: "int" }
        }
        Method {
            name: "convertIntToStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "convertIntToFullStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "convertIntToNumStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "translateInt"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "convertIntToStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
            Parameter { name: "format"; type: "string" }
        }
        Method {
            name: "convertDateToGragorian"
            type: "QDate"
            Parameter { name: "year"; type: "qlonglong" }
            Parameter { name: "month"; type: "int" }
            Parameter { name: "day"; type: "int" }
        }
        Method {
            name: "fromMSecSinceEpoch"
            type: "string"
            Parameter { name: "t"; type: "qlonglong" }
        }
        Method {
            name: "convertDateTimeToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "convertDateTimeToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
            Parameter { name: "format"; type: "string" }
        }
        Method {
            name: "convertDateTimeToLittleString"
            type: "string"
            Parameter { name: "dt"; type: "QDate" }
        }
        Method {
            name: "daysOfMonth"
            type: "int"
            Parameter { name: "year"; type: "qlonglong" }
            Parameter { name: "month"; type: "int" }
        }
        Method {
            name: "monthName"
            type: "string"
            Parameter { name: "month"; type: "int" }
        }
        Method {
            name: "combineDateAndTime"
            type: "QDateTime"
            Parameter { name: "date"; type: "QDate" }
            Parameter { name: "time"; type: "QTime" }
        }
        Method {
            name: "dateMonth"
            type: "int"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "dateDay"
            type: "int"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "dateYear"
            type: "qlonglong"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "convertDaysToDate"
            type: "QDate"
            Parameter { name: "days"; type: "int" }
        }
        Method {
            name: "convertDateToDays"
            type: "int"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "fromTime_t"
            type: "QDateTime"
            Parameter { name: "sec"; type: "uint" }
        }
    }
    Component {
        name: "AsemanCalendarModel"
        prototype: "QObject"
        exports: ["AsemanTools/CalendarModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "CalendarTypes"
            values: {
                "CalendarGregorian": 0,
                "CalendarJalali": 1,
                "CalendarHijri": 2
            }
        }
        Property { name: "years"; type: "QList<int>"; isReadonly: true }
        Property { name: "months"; type: "QList<int>"; isReadonly: true }
        Property { name: "days"; type: "QList<int>"; isReadonly: true }
        Property { name: "hours"; type: "QList<int>"; isReadonly: true }
        Property { name: "minutes"; type: "QList<int>"; isReadonly: true }
        Property { name: "currentYearIndex"; type: "int"; isReadonly: true }
        Property { name: "currentMonthIndex"; type: "int"; isReadonly: true }
        Property { name: "currentDaysIndex"; type: "int"; isReadonly: true }
        Property { name: "currentHoursIndex"; type: "int"; isReadonly: true }
        Property { name: "currentMinutesIndex"; type: "int"; isReadonly: true }
        Property { name: "dateTime"; type: "QDateTime" }
        Property { name: "calendar"; type: "int" }
        Property { name: "minimum"; type: "QDateTime" }
        Property { name: "maximum"; type: "QDateTime" }
        Signal { name: "secondsChanged" }
        Method {
            name: "setConvertDate"
            Parameter { name: "yearIdx"; type: "int" }
            Parameter { name: "monthIdx"; type: "int" }
            Parameter { name: "dayIdx"; type: "int" }
            Parameter { name: "hourIdx"; type: "int" }
            Parameter { name: "minuteIdx"; type: "int" }
        }
        Method {
            name: "monthName"
            type: "string"
            Parameter { name: "month"; type: "int" }
        }
    }
    Component {
        name: "AsemanContributorsModel"
        prototype: "AsemanAbstractListModel"
        exports: ["AsemanTools/ContributorsModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ItemRoles"
            values: {
                "TextRole": 256,
                "LinkRole": 257,
                "TypeRole": 258
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "files"; type: "QList<QUrl>" }
        Method { name: "refresh" }
    }
    Component {
        name: "AsemanCountriesModel"
        prototype: "AsemanAbstractListModel"
        exports: ["AsemanTools/CountriesModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ColorfullListModelRoles"
            values: {
                "NameRole": 256,
                "NativeNameRole": 257,
                "TldRole": 258,
                "Cca2Role": 259,
                "Ccn3Role": 260,
                "Cca3Role": 261,
                "CurrencyRole": 262,
                "CallingCodeRole": 263,
                "CapitalRole": 264,
                "AltSpellingsRole": 265,
                "RelevanceRole": 266,
                "RegionRole": 267,
                "SubregionRole": 268,
                "LanguageRole": 269,
                "LanguageCodesRole": 270,
                "TranslationsRole": 271,
                "LatlngRole": 272,
                "DemonymRole": 273,
                "BordersRole": 274,
                "AreaRole": 275,
                "KeyRole": 276
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "filter"; type: "string" }
        Property { name: "systemCountry"; type: "string"; isReadonly: true }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "AsemanDesktopTools"
        prototype: "QObject"
        exports: [
            "AsemanTools/AsemanDesktopTools 1.0",
            "AsemanTools/Desktop 1.0"
        ]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0, 0]
        Enum {
            name: "DesktopSession"
            values: {
                "Unknown": 0,
                "Gnome": 1,
                "GnomeFallBack": 2,
                "Unity": 3,
                "Kde": 4,
                "Plasma": 5,
                "Windows": 6,
                "Mac": 7
            }
        }
        Enum {
            name: "YesOrNoType"
            values: {
                "Warning": 0,
                "Question": 1,
                "Information": 2,
                "Critical": 3
            }
        }
        Property { name: "titleBarColor"; type: "QColor"; isReadonly: true }
        Property { name: "titleBarTransparentColor"; type: "QColor"; isReadonly: true }
        Property { name: "titleBarTextColor"; type: "QColor"; isReadonly: true }
        Property { name: "titleBarIsDark"; type: "bool"; isReadonly: true }
        Property { name: "desktopSession"; type: "int"; isReadonly: true }
        Property { name: "fontFamilies"; type: "QStringList"; isReadonly: true }
        Property { name: "menuStyle"; type: "string" }
        Property { name: "currentMenuObject"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "tooltip"; type: "string" }
        Signal { name: "fakeSignal" }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
        }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getOpenFileName"; type: "string" }
        Method {
            name: "getOpenFileNames"
            type: "QStringList"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getOpenFileNames"
            type: "QStringList"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
        }
        Method {
            name: "getOpenFileNames"
            type: "QStringList"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getOpenFileNames"
            type: "QStringList"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getOpenFileNames"; type: "QStringList" }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
        }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getSaveFileName"; type: "string" }
        Method {
            name: "getExistingDirectory"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getExistingDirectory"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getExistingDirectory"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getExistingDirectory"; type: "string" }
        Method {
            name: "getFont"
            type: "QFont"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "font"; type: "QFont" }
        }
        Method {
            name: "getFont"
            type: "QFont"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getFont"
            type: "QFont"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getFont"; type: "QFont" }
        Method {
            name: "getColor"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method { name: "getColor"; type: "QColor" }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "defaultText"; type: "string" }
        }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getText"; type: "string" }
        Method {
            name: "showMenu"
            type: "int"
            Parameter { name: "actions"; type: "QVariantList" }
            Parameter { name: "point"; type: "QPoint" }
        }
        Method {
            name: "showMenu"
            type: "int"
            Parameter { name: "actions"; type: "QVariantList" }
        }
        Method {
            name: "yesOrNo"
            type: "bool"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "yesOrNo"
            type: "bool"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "showMessage"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "showMessage"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
    }
    Component {
        name: "AsemanDevices"
        prototype: "QObject"
        exports: ["AsemanTools/Devices 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "isMobile"; type: "bool"; isReadonly: true }
        Property { name: "isTablet"; type: "bool"; isReadonly: true }
        Property { name: "isLargeTablet"; type: "bool"; isReadonly: true }
        Property { name: "isTouchDevice"; type: "bool"; isReadonly: true }
        Property { name: "isDesktop"; type: "bool"; isReadonly: true }
        Property { name: "isMacX"; type: "bool"; isReadonly: true }
        Property { name: "isWindows"; type: "bool"; isReadonly: true }
        Property { name: "isWindows8"; type: "bool"; isReadonly: true }
        Property { name: "isLinux"; type: "bool"; isReadonly: true }
        Property { name: "isAndroid"; type: "bool"; isReadonly: true }
        Property { name: "isIOS"; type: "bool"; isReadonly: true }
        Property { name: "isUbuntuTouch"; type: "bool"; isReadonly: true }
        Property { name: "isWindowsPhone"; type: "bool"; isReadonly: true }
        Property { name: "screen"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "cameraIsAvailable"; type: "bool"; isReadonly: true }
        Property { name: "lcdPhysicalSize"; type: "double"; isReadonly: true }
        Property { name: "lcdPhysicalWidth"; type: "double"; isReadonly: true }
        Property { name: "lcdPhysicalHeight"; type: "double"; isReadonly: true }
        Property { name: "lcdDpiX"; type: "double"; isReadonly: true }
        Property { name: "lcdDpiY"; type: "double"; isReadonly: true }
        Property { name: "platformVersion"; type: "string"; isReadonly: true }
        Property { name: "platformType"; type: "string"; isReadonly: true }
        Property { name: "platformName"; type: "string"; isReadonly: true }
        Property { name: "platformKernel"; type: "string"; isReadonly: true }
        Property { name: "platformKernelVersion"; type: "string"; isReadonly: true }
        Property { name: "platformCpuArchitecture"; type: "string"; isReadonly: true }
        Property { name: "screenSize"; type: "QSize"; isReadonly: true }
        Property { name: "keyboardHeight"; type: "double"; isReadonly: true }
        Property { name: "localFilesPrePath"; type: "string"; isReadonly: true }
        Property { name: "densityDpi"; type: "int"; isReadonly: true }
        Property { name: "density"; type: "double"; isReadonly: true }
        Property { name: "deviceDensity"; type: "double"; isReadonly: true }
        Property { name: "fontDensity"; type: "double"; isReadonly: true }
        Property { name: "transparentStatusBar"; type: "bool" }
        Property { name: "transparentNavigationBar"; type: "bool" }
        Property { name: "standardTitleBarHeight"; type: "double"; isReadonly: true }
        Property { name: "statusBarHeight"; type: "double"; isReadonly: true }
        Property { name: "navigationBarHeight"; type: "double"; isReadonly: true }
        Property { name: "clipboard"; type: "string" }
        Property { name: "clipboardUrl"; type: "QList<QUrl>" }
        Property { name: "keyboard"; type: "bool"; isReadonly: true }
        Property { name: "cameraLocation"; type: "string"; isReadonly: true }
        Property { name: "picturesLocation"; type: "string"; isReadonly: true }
        Property { name: "musicsLocation"; type: "string"; isReadonly: true }
        Property { name: "documentsLocation"; type: "string"; isReadonly: true }
        Property { name: "downloadsLocation"; type: "string"; isReadonly: true }
        Property { name: "resourcePath"; type: "string"; isReadonly: true }
        Property { name: "libsPath"; type: "string"; isReadonly: true }
        Property { name: "deviceName"; type: "string"; isReadonly: true }
        Property { name: "deviceId"; type: "string"; isReadonly: true }
        Property { name: "deviceShortId"; type: "string"; isReadonly: true }
        Property { name: "qtVersion"; type: "string"; isReadonly: true }
        Property { name: "qtMajorVersion"; type: "double"; isReadonly: true }
        Property { name: "fontScale"; type: "double" }
        Property { name: "deviceDetails"; type: "QVariantMap"; isReadonly: true }
        Signal {
            name: "incomingShare"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "msg"; type: "string" }
        }
        Signal {
            name: "incomingImage"
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "selectImageResult"
            Parameter { name: "path"; type: "string" }
        }
        Signal { name: "activityPaused" }
        Signal { name: "activityResumed" }
        Signal { name: "platformChanged" }
        Signal { name: "geometryChanged" }
        Method { name: "hideKeyboard" }
        Method { name: "showKeyboard" }
        Method {
            name: "share"
            Parameter { name: "subject"; type: "string" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "openFile"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "shareFile"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "callNumber"
            Parameter { name: "number"; type: "string" }
        }
        Method {
            name: "setClipboard"
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "setClipboardData"
            Parameter { name: "mime"; type: "AsemanMimeData"; isPointer: true }
        }
        Method { name: "startCameraPicture"; type: "bool" }
        Method { name: "getOpenPictures"; type: "bool" }
        Method {
            name: "setFlag"
            Parameter { name: "flag"; type: "int" }
            Parameter { name: "state"; type: "bool" }
        }
        Method {
            name: "setFlag"
            Parameter { name: "flag"; type: "int" }
        }
        Method {
            name: "flag"
            type: "bool"
            Parameter { name: "flag"; type: "int" }
        }
    }
    Component {
        name: "AsemanDownloader"
        prototype: "QObject"
        exports: ["AsemanTools/Downloader 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "recievedBytes"; type: "qlonglong"; isReadonly: true }
        Property { name: "totalBytes"; type: "qlonglong"; isReadonly: true }
        Property { name: "destination"; type: "string" }
        Property { name: "path"; type: "string" }
        Property { name: "downloaderId"; type: "int" }
        Property { name: "downloading"; type: "bool"; isReadonly: true }
        Signal {
            name: "error"
            Parameter { name: "error"; type: "QStringList" }
        }
        Signal {
            name: "finished"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal {
            name: "finishedWithId"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal { name: "failed" }
        Method { name: "start" }
        Method { name: "stop" }
    }
    Component {
        name: "AsemanDragArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["AsemanTools/MouseDragArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "orientation"; type: "int" }
        Property { name: "minimum"; type: "int" }
        Property { name: "mouseX"; type: "int"; isReadonly: true }
        Property { name: "mouseY"; type: "int"; isReadonly: true }
        Signal { name: "positionChanged" }
        Signal { name: "pressed" }
        Signal { name: "released" }
    }
    Component {
        name: "AsemanDragObject"
        prototype: "QObject"
        exports: ["AsemanTools/DragObject 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "mimeData"; type: "AsemanMimeData"; isPointer: true }
        Property { name: "dropAction"; type: "int" }
        Property { name: "source"; type: "QQuickItem"; isPointer: true }
        Property { name: "image"; type: "QUrl" }
        Property { name: "hotSpot"; type: "QPoint" }
        Property { name: "imageData"; type: "QImage" }
        Property { name: "dragging"; type: "bool"; isReadonly: true }
        Method { name: "start"; type: "int" }
    }
    Component {
        name: "AsemanEncrypter"
        prototype: "QObject"
        exports: ["AsemanTools/Encrypter 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "key"; type: "string" }
        Method {
            name: "encrypt"
            type: "QByteArray"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "decrypt"
            type: "QByteArray"
            Parameter { name: "data"; type: "QByteArray" }
        }
    }
    Component {
        name: "AsemanFileDownloaderQueue"
        prototype: "QObject"
        exports: [
            "AsemanTools/DownloaderQueue 1.0",
            "AsemanTools/FileDownloaderQueue 1.0"
        ]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0, 0]
        Property { name: "capacity"; type: "int" }
        Property { name: "destination"; type: "string" }
        Signal {
            name: "finished"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
        }
        Signal {
            name: "progressChanged"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "percent"; type: "double" }
        }
        Method {
            name: "download"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "AsemanFileDownloaderQueueItem"
        prototype: "QObject"
        exports: ["AsemanTools/FileDownloaderQueueItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "string" }
        Property { name: "fileName"; type: "string" }
        Property { name: "percent"; type: "double"; isReadonly: true }
        Property { name: "downloaderQueue"; type: "AsemanFileDownloaderQueue"; isPointer: true }
        Property { name: "result"; type: "string"; isReadonly: true }
    }
    Component {
        name: "AsemanFileSystemModel"
        prototype: "AsemanAbstractListModel"
        exports: ["AsemanTools/FileSystemModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SortFlag"
            values: {
                "Name": 0,
                "Size": 1,
                "Date": 2
            }
        }
        Enum {
            name: "DataRole"
            values: {
                "FilePath": 256,
                "FileUrl": 257,
                "FileName": 258,
                "FileMime": 259,
                "FileSize": 260,
                "FileSuffix": 261,
                "FileBaseName": 262,
                "FileIsDir": 263,
                "FileModifiedDate": 264,
                "FileCreatedDate": 265
            }
        }
        Property { name: "showDirs"; type: "bool" }
        Property { name: "showDotAndDotDot"; type: "bool" }
        Property { name: "showDirsFirst"; type: "bool" }
        Property { name: "showFiles"; type: "bool" }
        Property { name: "showHidden"; type: "bool" }
        Property { name: "nameFilters"; type: "QStringList" }
        Property { name: "folder"; type: "string" }
        Property { name: "parentFolder"; type: "string"; isReadonly: true }
        Property { name: "sortField"; type: "int" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "listChanged" }
        Method { name: "refresh" }
    }
    Component {
        name: "AsemanFontHandler"
        prototype: "QObject"
        exports: ["AsemanTools/FontHandler 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fonts"; type: "QVariantMap" }
        Method { name: "openFontChooser" }
        Method {
            name: "fontOf"
            type: "QFont"
            Parameter { name: "script"; type: "int" }
        }
        Method {
            name: "textToHtml"
            type: "string"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "save"; type: "QByteArray" }
        Method {
            name: "load"
            Parameter { name: "data"; type: "QByteArray" }
        }
    }
    Component {
        name: "AsemanHashObject"
        prototype: "QObject"
        exports: ["AsemanTools/HashObject 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "insert"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "insertMulti"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "key"
            type: "QVariant"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "keys"
            type: "QStringList"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "uniqueKeys"; type: "QStringList" }
        Method { name: "keys"; type: "QStringList" }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "values"
            type: "QVariantList"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "containt"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "containt"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "contains"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "contains"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "clear" }
        Method { name: "count"; type: "int" }
        Method { name: "toMap"; type: "QVariantMap" }
    }
    Component {
        name: "AsemanHostChecker"
        prototype: "QObject"
        exports: ["AsemanTools/HostChecker 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "host"; type: "string" }
        Property { name: "port"; type: "int" }
        Property { name: "interval"; type: "int" }
        Property { name: "available"; type: "bool"; isReadonly: true }
    }
    Component {
        name: "AsemanImageColorAnalizor"
        prototype: "QObject"
        exports: ["AsemanTools/ImageColorAnalizor 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Method"
            values: {
                "Normal": 0,
                "MoreSaturation": 1
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "color"; type: "QColor"; isReadonly: true }
        Property { name: "method"; type: "int" }
    }
    Component {
        name: "AsemanItemGrabber"
        prototype: "QObject"
        exports: ["AsemanTools/ItemGrabber 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "item"; type: "QQuickItem"; isPointer: true }
        Property { name: "suffix"; type: "string" }
        Property { name: "fileName"; type: "string" }
        Signal {
            name: "saved"
            Parameter { name: "dest"; type: "string" }
        }
        Signal { name: "failed" }
        Method {
            name: "save"
            Parameter { name: "dest"; type: "string" }
            Parameter { name: "size"; type: "QSize" }
        }
    }
    Component {
        name: "AsemanKdeWallet"
        prototype: "QObject"
        exports: ["AsemanTools/KdeWallet 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "availableWallets"; type: "QStringList"; isReadonly: true }
        Property { name: "opened"; type: "bool"; isReadonly: true }
        Property { name: "wallet"; type: "string" }
        Property { name: "folderList"; type: "QStringList"; isReadonly: true }
        Method {
            name: "createFolder"
            type: "bool"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "removeFolder"
            type: "bool"
            Parameter { name: "name"; type: "string" }
        }
        Method {
            name: "readEntry"
            type: "QByteArray"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "readEntryList"
            type: "QVariantMap"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "readMap"
            type: "QByteArray"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "readMapList"
            type: "QVariantMap"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "readPassword"
            type: "string"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "readPasswordList"
            type: "QVariantMap"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "removeEntry"
            type: "int"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "renameEntry"
            type: "int"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "oldName"; type: "string" }
            Parameter { name: "newName"; type: "string" }
        }
        Method {
            name: "writeEntry"
            type: "int"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QByteArray" }
        }
        Method {
            name: "writeEntry"
            type: "int"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QByteArray" }
            Parameter { name: "entryType"; type: "int" }
        }
        Method {
            name: "writeMap"
            type: "int"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QByteArray" }
        }
        Method {
            name: "writePassword"
            type: "int"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
        Method {
            name: "hasEntry"
            type: "bool"
            Parameter { name: "folder"; type: "string" }
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "hasFolder"
            type: "bool"
            Parameter { name: "folder"; type: "string" }
        }
        Method { name: "open"; type: "bool" }
        Method { name: "close"; type: "bool" }
    }
    Component {
        name: "AsemanKeychain"
        prototype: "QObject"
        exports: ["AsemanTools/Keychain 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "service"; type: "string" }
        Method {
            name: "read"
            type: "string"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "read"
            type: "string"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "readData"
            type: "QByteArray"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "readData"
            type: "QByteArray"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "write"
            type: "bool"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "data"; type: "string" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "write"
            type: "bool"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "data"; type: "string" }
        }
        Method {
            name: "writeData"
            type: "bool"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "writeData"
            type: "bool"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "jsCallback"; type: "QJSValue" }
        }
        Method {
            name: "remove"
            type: "bool"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "AsemanLinuxNativeNotification"
        prototype: "QObject"
        exports: ["AsemanTools/Notification 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Signal {
            name: "notifyClosed"
            Parameter { name: "id"; type: "uint" }
        }
        Signal {
            name: "notifyTimedOut"
            Parameter { name: "id"; type: "uint" }
        }
        Signal {
            name: "notifyAction"
            Parameter { name: "id"; type: "uint" }
            Parameter { name: "action"; type: "string" }
        }
        Method {
            name: "sendNotify"
            type: "uint"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "body"; type: "string" }
            Parameter { name: "icon"; type: "string" }
            Parameter { name: "replace_id"; type: "uint" }
            Parameter { name: "timeOut"; type: "int" }
            Parameter { name: "actions"; type: "QStringList" }
        }
        Method {
            name: "sendNotify"
            type: "uint"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "body"; type: "string" }
            Parameter { name: "icon"; type: "string" }
            Parameter { name: "replace_id"; type: "uint" }
            Parameter { name: "timeOut"; type: "int" }
        }
        Method {
            name: "sendNotify"
            type: "uint"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "body"; type: "string" }
            Parameter { name: "icon"; type: "string" }
            Parameter { name: "replace_id"; type: "uint" }
        }
        Method {
            name: "sendNotify"
            type: "uint"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "body"; type: "string" }
            Parameter { name: "icon"; type: "string" }
        }
        Method {
            name: "closeNotification"
            Parameter { name: "id"; type: "uint" }
        }
    }
    Component {
        name: "AsemanListObject"
        prototype: "QObject"
        exports: ["AsemanTools/ListObject 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "list"; type: "QVariantList" }
        Method {
            name: "removeAll"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "removeOne"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "removeAt"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "takeLast"; type: "QVariant" }
        Method { name: "takeFirst"; type: "QVariant" }
        Method {
            name: "takeAt"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clear" }
        Method { name: "last"; type: "QVariant" }
        Method { name: "first"; type: "QVariant" }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "append"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "prepend"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method { name: "count"; type: "int" }
        Method { name: "isEmpty"; type: "bool" }
        Method {
            name: "at"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "fromList"
            Parameter { name: "list"; type: "QVariantList" }
        }
        Method { name: "toList"; type: "QVariantList" }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "v"; type: "QVariant" }
        }
    }
    Component {
        name: "AsemanMapDownloader"
        prototype: "QObject"
        exports: ["AsemanTools/MapDownloader 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MapProvider"
            values: {
                "MapProviderGoogle": 0
            }
        }
        Property { name: "destination"; type: "QUrl" }
        Property { name: "image"; type: "QUrl"; isReadonly: true }
        Property { name: "currentGeo"; type: "QGeoCoordinate"; isReadonly: true }
        Property { name: "mapProvider"; type: "int" }
        Property { name: "size"; type: "QSize" }
        Property { name: "zoom"; type: "int" }
        Property { name: "downloading"; type: "bool"; isReadonly: true }
        Signal { name: "finished" }
        Method {
            name: "download"
            Parameter { name: "geo"; type: "QPointF" }
        }
        Method {
            name: "check"
            type: "bool"
            Parameter { name: "geo"; type: "QPointF" }
        }
        Method {
            name: "linkOf"
            type: "string"
            Parameter { name: "geo"; type: "QPointF" }
        }
        Method {
            name: "webLinkOf"
            type: "string"
            Parameter { name: "geo"; type: "QPointF" }
        }
        Method {
            name: "pathOf"
            type: "string"
            Parameter { name: "geo"; type: "QPointF" }
        }
        Method {
            name: "download"
            Parameter { name: "geo"; type: "QGeoCoordinate" }
        }
        Method {
            name: "check"
            type: "bool"
            Parameter { name: "geo"; type: "QGeoCoordinate" }
        }
        Method {
            name: "linkOf"
            type: "string"
            Parameter { name: "geo"; type: "QGeoCoordinate" }
        }
        Method {
            name: "webLinkOf"
            type: "string"
            Parameter { name: "geo"; type: "QGeoCoordinate" }
        }
        Method {
            name: "pathOf"
            type: "string"
            Parameter { name: "geo"; type: "QGeoCoordinate" }
        }
    }
    Component {
        name: "AsemanMimeApps"
        prototype: "QObject"
        exports: ["AsemanTools/MimeApps 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "openFiles"
            Parameter { name: "app"; type: "string" }
            Parameter { name: "files"; type: "QStringList" }
        }
        Method {
            name: "appsOfMime"
            type: "QStringList"
            Parameter { name: "mime"; type: "string" }
        }
        Method {
            name: "appsOfFile"
            type: "QStringList"
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "appName"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appIcon"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appGenericName"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appComment"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appPath"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appCommand"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appMimes"
            type: "QStringList"
            Parameter { name: "app"; type: "string" }
        }
    }
    Component {
        name: "AsemanMimeData"
        prototype: "QObject"
        exports: ["AsemanTools/MimeData 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "html"; type: "string" }
        Property { name: "urls"; type: "QList<QUrl>" }
        Property { name: "dataMap"; type: "QVariantMap" }
        Property { name: "formats"; type: "QStringList"; isReadonly: true }
        Method { name: "fetchClipboard" }
        Method {
            name: "getDataAsString"
            type: "string"
            Parameter { name: "type"; type: "string" }
        }
    }
    Component {
        name: "AsemanMixedListModel"
        prototype: "AsemanAbstractListModel"
        exports: ["AsemanTools/MixedListModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "models"; type: "QVariantList" }
    }
    Component {
        name: "AsemanMouseEventListener"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["AsemanTools/MouseEventListener 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "mouseX"; type: "double"; isReadonly: true }
        Property { name: "mouseY"; type: "double"; isReadonly: true }
        Property { name: "mousePosition"; type: "QPointF"; isReadonly: true }
        Signal { name: "mousePressed" }
        Signal { name: "mouseReleased" }
        Method { name: "ignoreEvent" }
        Method { name: "acceptEvent" }
    }
    Component {
        name: "AsemanNetworkManager"
        prototype: "QObject"
        exports: ["AsemanTools/NetworkManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "defaultNetworkIdentifier"; type: "string"; isReadonly: true }
        Property { name: "configurations"; type: "QVariantMap"; isReadonly: true }
        Property {
            name: "defaultNetwork"
            type: "AsemanNetworkManagerItem"
            isReadonly: true
            isPointer: true
        }
        Property { name: "interval"; type: "int" }
    }
    Component {
        name: "AsemanNetworkManagerItem"
        prototype: "QObject"
        exports: ["AsemanTools/NetworkManagerItem 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "bearerType"; type: "int"; isReadonly: true }
        Property { name: "bearerTypeFamily"; type: "int"; isReadonly: true }
        Property { name: "bearerTypeName"; type: "string"; isReadonly: true }
        Property { name: "children"; type: "QList<AsemanNetworkManagerItem*>"; isReadonly: true }
        Property { name: "identifier"; type: "string"; isReadonly: true }
        Property { name: "isRoamingAvailable"; type: "bool"; isReadonly: true }
        Property { name: "isValid"; type: "bool"; isReadonly: true }
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "purpose"; type: "int"; isReadonly: true }
        Property { name: "state"; type: "int"; isReadonly: true }
        Property { name: "type"; type: "int"; isReadonly: true }
    }
    Component {
        name: "AsemanNetworkSleepManager"
        prototype: "QObject"
        exports: ["AsemanTools/NetworkSleepManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "host"; type: "string" }
        Property { name: "port"; type: "int" }
        Property { name: "interval"; type: "int" }
        Property { name: "networkManager"; type: "bool" }
        Property { name: "available"; type: "bool"; isReadonly: true }
        Signal { name: "wake" }
        Signal { name: "sleep" }
    }
    Component {
        name: "AsemanQmlImage"
        defaultProperty: "data"
        prototype: "QQuickPaintedItem"
        exports: ["AsemanTools/AsemanImage 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "FillMode"
            values: {
                "Stretch": 0,
                "PreserveAspectFit": 1,
                "PreserveAspectCrop": 2,
                "Tile": 3
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "fillMode"; type: "int" }
        Property { name: "asynchronous"; type: "bool" }
        Property { name: "autoTransform"; type: "bool" }
        Property { name: "cache"; type: "bool" }
        Property { name: "horizontalAlignment"; type: "int" }
        Property { name: "verticalAlignment"; type: "int" }
        Property { name: "mipmap"; type: "bool" }
        Property { name: "mirror"; type: "bool" }
        Property { name: "paintedWidth"; type: "double"; isReadonly: true }
        Property { name: "paintedHeight"; type: "double"; isReadonly: true }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "sourceSize"; type: "QSize"; isReadonly: true }
        Signal { name: "paintedSizeChanged" }
        Method { name: "refresh" }
    }
    Component {
        name: "AsemanQmlSmartComponent"
        prototype: "QObject"
        exports: ["AsemanTools/SmartComponentCore 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "QUrl" }
        Property { name: "status"; type: "int"; isReadonly: true }
        Property { name: "component"; type: "QQmlComponent"; isReadonly: true; isPointer: true }
        Property { name: "delayInterval"; type: "int" }
        Signal { name: "errorChanged" }
        Signal { name: "ready" }
    }
    Component {
        name: "AsemanQtLogger"
        prototype: "QObject"
        exports: ["AsemanTools/Logger 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "debug"
            Parameter { name: "var"; type: "QVariant" }
        }
    }
    Component {
        name: "AsemanQuickItemImageGrabber"
        prototype: "QObject"
        exports: ["AsemanTools/ItemImageGrabber 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "item"; type: "QQuickItem"; isPointer: true }
        Property { name: "image"; type: "QImage"; isReadonly: true }
        Property { name: "defaultImage"; type: "QUrl" }
        Method { name: "start" }
    }
    Component {
        name: "AsemanQuickObject"
        defaultProperty: "items"
        prototype: "QObject"
        exports: ["AsemanTools/AsemanObject 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "AsemanQuickViewWrapper"
        prototype: "QObject"
        exports: ["AsemanTools/View 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "reverseScroll"; type: "bool" }
        Property { name: "statusBarHeight"; type: "double"; isReadonly: true }
        Property { name: "navigationBarHeight"; type: "double"; isReadonly: true }
        Property { name: "root"; type: "QObject"; isPointer: true }
        Property { name: "focusedText"; type: "QQuickItem"; isPointer: true }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "reverseLayout"; type: "bool"; isReadonly: true }
        Property { name: "defaultLayout"; type: "bool"; isReadonly: true }
        Property { name: "offlineStoragePath"; type: "string" }
        Property { name: "flickVelocity"; type: "double"; isReadonly: true }
        Property { name: "window"; type: "QWindow"; isReadonly: true; isPointer: true }
        Signal { name: "fullscreenChanged" }
        Signal { name: "backControllerChanged" }
        Signal { name: "fakeSignal" }
        Signal { name: "closeRequest" }
        Method { name: "discardFocusedText" }
        Method {
            name: "registerWindow"
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
    }
    Component {
        name: "AsemanSensors"
        prototype: "QObject"
        exports: ["AsemanTools/AsemanSensors 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SensorType"
            values: {
                "RotationSensor": 1,
                "GravitySensor": 2,
                "AccelerometerSensor": 4,
                "GyroscopeSensor": 8,
                "AllSensors": 15
            }
        }
        Property { name: "ax"; type: "double"; isReadonly: true }
        Property { name: "ay"; type: "double"; isReadonly: true }
        Property { name: "az"; type: "double"; isReadonly: true }
        Property { name: "gx"; type: "double"; isReadonly: true }
        Property { name: "gy"; type: "double"; isReadonly: true }
        Property { name: "gz"; type: "double"; isReadonly: true }
        Property { name: "angleX"; type: "double"; isReadonly: true }
        Property { name: "angleY"; type: "double"; isReadonly: true }
        Property { name: "angleZ"; type: "double"; isReadonly: true }
        Property { name: "zeroAngleX"; type: "double"; isReadonly: true }
        Property { name: "zeroAngleY"; type: "double"; isReadonly: true }
        Property { name: "zeroAngleZ"; type: "double"; isReadonly: true }
        Property { name: "angleSpeedX"; type: "double"; isReadonly: true }
        Property { name: "angleSpeedY"; type: "double"; isReadonly: true }
        Property { name: "angleSpeedZ"; type: "double"; isReadonly: true }
        Property { name: "duration"; type: "int" }
        Property { name: "active"; type: "bool" }
        Property { name: "activeSensors"; type: "int" }
        Signal { name: "accChanged" }
        Signal { name: "grvChanged" }
        Signal { name: "angleChanged" }
        Signal { name: "zeroChanged" }
        Signal { name: "angleSpeedChanged" }
        Signal { name: "updated" }
        Method { name: "start" }
        Method { name: "stop" }
        Method { name: "zero" }
        Method {
            name: "setZero"
            Parameter { name: "xrad"; type: "double" }
            Parameter { name: "zrad"; type: "double" }
        }
        Method { name: "refresh" }
    }
    Component {
        name: "AsemanSettings"
        prototype: "QObject"
        exports: ["AsemanTools/Settings 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "category"; type: "string" }
        Property { name: "source"; type: "string" }
        Signal { name: "valueChanged" }
        Method {
            name: "setValue"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
        }
        Method { name: "keys"; type: "QStringList" }
    }
    Component {
        name: "AsemanStoreManager"
        defaultProperty: "items"
        prototype: "AsemanQuickObject"
        exports: ["AsemanTools/StoreManager 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "InventoryState"
            values: {
                "InventoryStateNone": 0,
                "InventoryStatePurchasing": 1,
                "InventoryStatePurchased": 2
            }
        }
        Property { name: "publicKey"; type: "string" }
        Property { name: "packageName"; type: "string" }
        Property { name: "bindIntent"; type: "string" }
        Property { name: "cacheSource"; type: "string" }
        Signal { name: "itemDetailsChanged" }
        Signal {
            name: "inventoryStateChanged"
            Parameter { name: "sku"; type: "string" }
        }
        Signal {
            name: "inventoryPurchased"
            Parameter { name: "sku"; type: "string" }
        }
        Method { name: "setup"; type: "bool" }
    }
    Component {
        name: "AsemanStoreManagerModel"
        prototype: "AsemanAbstractListModel"
        exports: ["AsemanTools/StoreManagerModel 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "storeManager"; type: "AsemanStoreManager"; isPointer: true }
    }
    Component {
        name: "AsemanStoreManagerProduct"
        prototype: "QObject"
        exports: ["AsemanTools/StoreManagerProduct 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "IsPurchased"; type: "bool"; isReadonly: true }
        Property { name: "IsPurchasing"; type: "bool"; isReadonly: true }
        Property { name: "price"; type: "string"; isReadonly: true }
        Property { name: "title"; type: "string"; isReadonly: true }
        Property { name: "description"; type: "string"; isReadonly: true }
        Property { name: "type"; type: "string"; isReadonly: true }
        Property { name: "sku"; type: "string" }
        Property { name: "store"; type: "AsemanStoreManager"; isPointer: true }
        Signal { name: "fakeSignal" }
    }
    Component {
        name: "AsemanSystemInfo"
        prototype: "QObject"
        exports: ["AsemanTools/SystemInfo 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "cpuCores"; type: "qulonglong"; isReadonly: true }
        Property { name: "cpuFreq"; type: "qulonglong"; isReadonly: true }
        Signal { name: "fakeSignal" }
        Method { name: "cpuCores"; type: "qulonglong" }
        Method { name: "cpuFreq"; type: "qulonglong" }
    }
    Component {
        name: "AsemanSystemTray"
        defaultProperty: "items"
        prototype: "AsemanQuickObject"
        exports: ["AsemanTools/SystemTray 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ActivateReason"
            values: {
                "ActivateUnknown": 0,
                "ActivateContext": 1,
                "ActivateDoubleClick": 2,
                "ActivateTrigger": 3,
                "ActivateMiddleClick": 4
            }
        }
        Property { name: "visible"; type: "bool" }
        Property { name: "icon"; type: "QUrl" }
        Property { name: "badgeCount"; type: "int" }
        Property { name: "badgeFillColor"; type: "QColor" }
        Property { name: "badgeStrokeColor"; type: "QColor" }
        Property { name: "badgeTextColor"; type: "QColor" }
        Property { name: "menu"; type: "QStringList" }
        Signal {
            name: "activated"
            Parameter { name: "reason"; type: "int" }
        }
        Signal {
            name: "menuTriggered"
            Parameter { name: "index"; type: "int" }
        }
    }
    Component {
        name: "AsemanTaskbarButton"
        prototype: "QObject"
        exports: ["AsemanTools/TaskbarButton 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "badgeNumber"; type: "int" }
        Property { name: "progress"; type: "double" }
        Property { name: "launcher"; type: "string" }
        Property { name: "window"; type: "QWindow"; isPointer: true }
        Method { name: "userAttention" }
    }
    Component {
        name: "AsemanTextTools"
        prototype: "QObject"
        exports: ["AsemanTools/TextTools 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "htmlWidth"
            type: "double"
            Parameter { name: "html"; type: "string" }
        }
        Method {
            name: "directionOf"
            type: "Qt::LayoutDirection"
            Parameter { name: "str"; type: "string" }
        }
    }
    Component {
        name: "AsemanTitleBarColorGrabber"
        prototype: "QObject"
        exports: ["AsemanTools/TitleBarColorGrabber 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "window"; type: "QWindow"; isPointer: true }
        Property { name: "autoRefresh"; type: "bool" }
        Property { name: "defaultColor"; type: "QColor" }
        Property { name: "color"; type: "QColor"; isReadonly: true }
        Method { name: "refresh" }
    }
    Component {
        name: "AsemanTools"
        prototype: "QObject"
        exports: ["AsemanTools/Tools 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "debug"
            Parameter { name: "var"; type: "QVariant" }
        }
        Method {
            name: "exportDocuments"
            Parameter { name: "destination"; type: "string" }
        }
        Method { name: "currentDate"; type: "QDateTime" }
        Method {
            name: "dateToMSec"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "mSecToDate"
            type: "QDateTime"
            Parameter { name: "ms"; type: "string" }
        }
        Method {
            name: "dateToSec"
            type: "qlonglong"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "dateToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
            Parameter { name: "format"; type: "string" }
        }
        Method {
            name: "dateToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "dateAddDays"
            type: "QDate"
            Parameter { name: "date"; type: "QDate" }
            Parameter { name: "days"; type: "int" }
        }
        Method {
            name: "toStringList"
            type: "QStringList"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "toVariantMap"
            type: "QVariantMap"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "toVariantList"
            type: "QVariantList"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "variantToJson"
            type: "string"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "jsonToVariant"
            type: "QVariant"
            Parameter { name: "json"; type: "string" }
        }
        Method {
            name: "byteArrayToString"
            type: "string"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "compress"
            type: "QByteArray"
            Parameter { name: "data"; type: "QByteArray" }
            Parameter { name: "level"; type: "int" }
        }
        Method {
            name: "compress"
            type: "QByteArray"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "uncompress"
            type: "QByteArray"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "bytesToVariant"
            type: "QVariant"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Method {
            name: "variantToBytes"
            type: "QByteArray"
            Parameter { name: "var"; type: "QVariant" }
        }
        Method {
            name: "fileName"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "fileSuffix"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "fileMime"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "fileParent"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "readText"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "filesOf"
            type: "QStringList"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "imageSize"
            type: "QSize"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "writeFile"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "data"; type: "QVariant" }
            Parameter { name: "compress"; type: "bool" }
        }
        Method {
            name: "writeFile"
            type: "bool"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "data"; type: "QVariant" }
        }
        Method {
            name: "readFile"
            type: "QByteArray"
            Parameter { name: "path"; type: "string" }
            Parameter { name: "uncompress"; type: "bool" }
        }
        Method {
            name: "readFile"
            type: "QByteArray"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "className"
            type: "string"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
        Method {
            name: "stringLinks"
            type: "QStringList"
            Parameter { name: "str"; type: "string" }
        }
        Method {
            name: "stringToUrl"
            type: "QUrl"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "urlToLocalPath"
            type: "string"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method { name: "qtVersion"; type: "string" }
        Method { name: "aboutAseman"; type: "string" }
        Method {
            name: "deleteItemDelay"
            Parameter { name: "o"; type: "QObject"; isPointer: true }
            Parameter { name: "ms"; type: "int" }
        }
        Method {
            name: "colorHue"
            type: "double"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "colorLightness"
            type: "double"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "colorSaturation"
            type: "double"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "mkDir"
            Parameter { name: "dir"; type: "string" }
        }
        Method {
            name: "colorHsl"
            type: "QVariantMap"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "createVideoThumbnail"
            type: "bool"
            Parameter { name: "video"; type: "string" }
            Parameter { name: "output"; type: "string" }
            Parameter { name: "ffmpegPath"; type: "string" }
        }
        Method {
            name: "createVideoThumbnail"
            type: "bool"
            Parameter { name: "video"; type: "string" }
            Parameter { name: "output"; type: "string" }
        }
        Method {
            name: "translateNumbers"
            type: "string"
            Parameter { name: "input"; type: "string" }
        }
        Method {
            name: "trNums"
            type: "string"
            Parameter { name: "input"; type: "string" }
        }
        Method {
            name: "passToMd5"
            type: "string"
            Parameter { name: "pass"; type: "string" }
        }
        Method {
            name: "md5"
            type: "string"
            Parameter { name: "str"; type: "string" }
        }
        Method { name: "createUuid"; type: "string" }
        Method {
            name: "stringRemove"
            type: "string"
            Parameter { name: "str"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "regExp"; type: "bool" }
        }
        Method {
            name: "stringRemove"
            type: "string"
            Parameter { name: "str"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "htmlToPlaintText"
            type: "string"
            Parameter { name: "html"; type: "string" }
        }
        Method {
            name: "copyDirectory"
            Parameter { name: "src"; type: "string" }
            Parameter { name: "dst"; type: "string" }
        }
        Method {
            name: "copy"
            type: "bool"
            Parameter { name: "src"; type: "string" }
            Parameter { name: "dst"; type: "string" }
        }
        Method {
            name: "deleteFile"
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "clearDirectory"
            Parameter { name: "dir"; type: "string" }
        }
        Method {
            name: "setProperty"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "property"; type: "string" }
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "property"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "property"; type: "string" }
        }
        Method {
            name: "directionOf"
            type: "Qt::LayoutDirection"
            Parameter { name: "str"; type: "string" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
            Parameter { name: "v7"; type: "QVariant" }
            Parameter { name: "v8"; type: "QVariant" }
            Parameter { name: "v9"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
            Parameter { name: "v7"; type: "QVariant" }
            Parameter { name: "v8"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
            Parameter { name: "v7"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
        }
        Method {
            name: "jsDelayCall"
            Parameter { name: "ms"; type: "int" }
            Parameter { name: "value"; type: "QJSValue" }
        }
        Method {
            name: "setInAppStoreProperty"
            Parameter { name: "store"; type: "QObject"; isPointer: true }
            Parameter { name: "propertyName"; type: "string" }
            Parameter { name: "value"; type: "string" }
        }
    }
    Component {
        name: "AsemanTranslationManager"
        defaultProperty: "items"
        prototype: "AsemanQuickObject"
        exports: ["AsemanTools/TranslationManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "sourceDirectory"; type: "QUrl" }
        Property { name: "localeName"; type: "string" }
        Property { name: "fileName"; type: "string" }
        Property { name: "delimiters"; type: "string" }
        Property { name: "refresher"; type: "string"; isReadonly: true }
        Property { name: "textDirection"; type: "int"; isReadonly: true }
        Property { name: "translations"; type: "QVariantMap"; isReadonly: true }
        Signal { name: "refreshed" }
    }
    Component {
        name: "AsemanWebPageGrabber"
        defaultProperty: "items"
        prototype: "AsemanQuickObject"
        exports: ["AsemanTools/WebPageGrabber 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "QUrl" }
        Property { name: "destination"; type: "string" }
        Property { name: "timeOut"; type: "int" }
        Property { name: "running"; type: "bool"; isReadonly: true }
        Property { name: "isAvailable"; type: "bool"; isReadonly: true }
        Signal {
            name: "complete"
            Parameter { name: "image"; type: "QImage" }
        }
        Signal {
            name: "finished"
            Parameter { name: "path"; type: "QUrl" }
        }
        Method {
            name: "start"
            Parameter { name: "force"; type: "bool" }
        }
        Method { name: "start" }
        Method {
            name: "check"
            type: "QUrl"
            Parameter { name: "source"; type: "QUrl" }
            Parameter { name: "destPath"; type: "string"; isPointer: true }
        }
        Method {
            name: "check"
            type: "QUrl"
            Parameter { name: "source"; type: "QUrl" }
        }
    }
    Component {
        name: "AsemanWindowDetails"
        prototype: "QObject"
        exports: ["AsemanTools/WindowDetails 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "window"; type: "QWindow"; isPointer: true }
        Property { name: "screen"; type: "QScreen"; isReadonly: true; isPointer: true }
    }
    Component {
        name: "QScreen"
        prototype: "QObject"
        exports: ["AsemanTools/Screen 1.0"]
        isCreatable: false
        exportMetaObjectRevisions: [0]
        Property { name: "name"; type: "string"; isReadonly: true }
        Property { name: "manufacturer"; type: "string"; isReadonly: true }
        Property { name: "model"; type: "string"; isReadonly: true }
        Property { name: "serialNumber"; type: "string"; isReadonly: true }
        Property { name: "depth"; type: "int"; isReadonly: true }
        Property { name: "size"; type: "QSize"; isReadonly: true }
        Property { name: "availableSize"; type: "QSize"; isReadonly: true }
        Property { name: "virtualSize"; type: "QSize"; isReadonly: true }
        Property { name: "availableVirtualSize"; type: "QSize"; isReadonly: true }
        Property { name: "geometry"; type: "QRect"; isReadonly: true }
        Property { name: "availableGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "virtualGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "availableVirtualGeometry"; type: "QRect"; isReadonly: true }
        Property { name: "physicalSize"; type: "QSizeF"; isReadonly: true }
        Property { name: "physicalDotsPerInchX"; type: "double"; isReadonly: true }
        Property { name: "physicalDotsPerInchY"; type: "double"; isReadonly: true }
        Property { name: "physicalDotsPerInch"; type: "double"; isReadonly: true }
        Property { name: "logicalDotsPerInchX"; type: "double"; isReadonly: true }
        Property { name: "logicalDotsPerInchY"; type: "double"; isReadonly: true }
        Property { name: "logicalDotsPerInch"; type: "double"; isReadonly: true }
        Property { name: "devicePixelRatio"; type: "double"; isReadonly: true }
        Property { name: "primaryOrientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "orientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "nativeOrientation"; type: "Qt::ScreenOrientation"; isReadonly: true }
        Property { name: "refreshRate"; type: "double"; isReadonly: true }
        Signal {
            name: "geometryChanged"
            Parameter { name: "geometry"; type: "QRect" }
        }
        Signal {
            name: "availableGeometryChanged"
            Parameter { name: "geometry"; type: "QRect" }
        }
        Signal {
            name: "physicalSizeChanged"
            Parameter { name: "size"; type: "QSizeF" }
        }
        Signal {
            name: "physicalDotsPerInchChanged"
            Parameter { name: "dpi"; type: "double" }
        }
        Signal {
            name: "logicalDotsPerInchChanged"
            Parameter { name: "dpi"; type: "double" }
        }
        Signal {
            name: "virtualGeometryChanged"
            Parameter { name: "rect"; type: "QRect" }
        }
        Signal {
            name: "primaryOrientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "orientationChanged"
            Parameter { name: "orientation"; type: "Qt::ScreenOrientation" }
        }
        Signal {
            name: "refreshRateChanged"
            Parameter { name: "refreshRate"; type: "double" }
        }
    }
    Component {
        prototype: "QQuickAbstractButton"
        name: "QtQuick.Controls/AbstractButton 2.0"
        exports: ["QtQuick.Controls/AbstractButton 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickApplicationWindow"
        name: "QtQuick.Controls/ApplicationWindow 2.0"
        exports: ["QtQuick.Controls/ApplicationWindow 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QObject"
        name: "Awesome 1.0"
        exports: ["Awesome 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "family"; type: "string"; isReadonly: true }
        Property { name: "fa_500px"; type: "string"; isReadonly: true }
        Property { name: "fa_adjust"; type: "string"; isReadonly: true }
        Property { name: "fa_adn"; type: "string"; isReadonly: true }
        Property { name: "fa_align_center"; type: "string"; isReadonly: true }
        Property { name: "fa_align_justify"; type: "string"; isReadonly: true }
        Property { name: "fa_align_left"; type: "string"; isReadonly: true }
        Property { name: "fa_align_right"; type: "string"; isReadonly: true }
        Property { name: "fa_amazon"; type: "string"; isReadonly: true }
        Property { name: "fa_ambulance"; type: "string"; isReadonly: true }
        Property { name: "fa_anchor"; type: "string"; isReadonly: true }
        Property { name: "fa_android"; type: "string"; isReadonly: true }
        Property { name: "fa_angellist"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_double_down"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_double_left"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_double_right"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_double_up"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_down"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_left"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_right"; type: "string"; isReadonly: true }
        Property { name: "fa_angle_up"; type: "string"; isReadonly: true }
        Property { name: "fa_apple"; type: "string"; isReadonly: true }
        Property { name: "fa_archive"; type: "string"; isReadonly: true }
        Property { name: "fa_area_chart"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_down"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_left"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_o_down"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_o_left"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_o_right"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_o_up"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_right"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_circle_up"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_down"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_left"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_right"; type: "string"; isReadonly: true }
        Property { name: "fa_arrow_up"; type: "string"; isReadonly: true }
        Property { name: "fa_arrows"; type: "string"; isReadonly: true }
        Property { name: "fa_arrows_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_arrows_h"; type: "string"; isReadonly: true }
        Property { name: "fa_arrows_v"; type: "string"; isReadonly: true }
        Property { name: "fa_asterisk"; type: "string"; isReadonly: true }
        Property { name: "fa_at"; type: "string"; isReadonly: true }
        Property { name: "fa_automobile"; type: "string"; isReadonly: true }
        Property { name: "fa_backward"; type: "string"; isReadonly: true }
        Property { name: "fa_balance_scale"; type: "string"; isReadonly: true }
        Property { name: "fa_ban"; type: "string"; isReadonly: true }
        Property { name: "fa_bank"; type: "string"; isReadonly: true }
        Property { name: "fa_bar_chart"; type: "string"; isReadonly: true }
        Property { name: "fa_bar_chart_o"; type: "string"; isReadonly: true }
        Property { name: "fa_barcode"; type: "string"; isReadonly: true }
        Property { name: "fa_bars"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_0"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_1"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_2"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_3"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_4"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_empty"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_full"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_half"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_quarter"; type: "string"; isReadonly: true }
        Property { name: "fa_battery_three_quarters"; type: "string"; isReadonly: true }
        Property { name: "fa_bed"; type: "string"; isReadonly: true }
        Property { name: "fa_beer"; type: "string"; isReadonly: true }
        Property { name: "fa_behance"; type: "string"; isReadonly: true }
        Property { name: "fa_behance_square"; type: "string"; isReadonly: true }
        Property { name: "fa_bell"; type: "string"; isReadonly: true }
        Property { name: "fa_bell_o"; type: "string"; isReadonly: true }
        Property { name: "fa_bell_slash"; type: "string"; isReadonly: true }
        Property { name: "fa_bell_slash_o"; type: "string"; isReadonly: true }
        Property { name: "fa_bicycle"; type: "string"; isReadonly: true }
        Property { name: "fa_binoculars"; type: "string"; isReadonly: true }
        Property { name: "fa_birthday_cake"; type: "string"; isReadonly: true }
        Property { name: "fa_bitbucket"; type: "string"; isReadonly: true }
        Property { name: "fa_bitbucket_square"; type: "string"; isReadonly: true }
        Property { name: "fa_bitcoin"; type: "string"; isReadonly: true }
        Property { name: "fa_black_tie"; type: "string"; isReadonly: true }
        Property { name: "fa_bluetooth"; type: "string"; isReadonly: true }
        Property { name: "fa_bluetooth_b"; type: "string"; isReadonly: true }
        Property { name: "fa_bold"; type: "string"; isReadonly: true }
        Property { name: "fa_bolt"; type: "string"; isReadonly: true }
        Property { name: "fa_bomb"; type: "string"; isReadonly: true }
        Property { name: "fa_book"; type: "string"; isReadonly: true }
        Property { name: "fa_bookmark"; type: "string"; isReadonly: true }
        Property { name: "fa_bookmark_o"; type: "string"; isReadonly: true }
        Property { name: "fa_briefcase"; type: "string"; isReadonly: true }
        Property { name: "fa_btc"; type: "string"; isReadonly: true }
        Property { name: "fa_bug"; type: "string"; isReadonly: true }
        Property { name: "fa_building"; type: "string"; isReadonly: true }
        Property { name: "fa_building_o"; type: "string"; isReadonly: true }
        Property { name: "fa_bullhorn"; type: "string"; isReadonly: true }
        Property { name: "fa_bullseye"; type: "string"; isReadonly: true }
        Property { name: "fa_bus"; type: "string"; isReadonly: true }
        Property { name: "fa_buysellads"; type: "string"; isReadonly: true }
        Property { name: "fa_cab"; type: "string"; isReadonly: true }
        Property { name: "fa_calculator"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar_check_o"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar_minus_o"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar_o"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar_plus_o"; type: "string"; isReadonly: true }
        Property { name: "fa_calendar_times_o"; type: "string"; isReadonly: true }
        Property { name: "fa_camera"; type: "string"; isReadonly: true }
        Property { name: "fa_camera_retro"; type: "string"; isReadonly: true }
        Property { name: "fa_car"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_down"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_left"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_right"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_square_o_down"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_square_o_left"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_square_o_right"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_square_o_up"; type: "string"; isReadonly: true }
        Property { name: "fa_caret_up"; type: "string"; isReadonly: true }
        Property { name: "fa_cart_arrow_down"; type: "string"; isReadonly: true }
        Property { name: "fa_cart_plus"; type: "string"; isReadonly: true }
        Property { name: "fa_cc"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_amex"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_diners_club"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_discover"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_jcb"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_mastercard"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_paypal"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_stripe"; type: "string"; isReadonly: true }
        Property { name: "fa_cc_visa"; type: "string"; isReadonly: true }
        Property { name: "fa_certificate"; type: "string"; isReadonly: true }
        Property { name: "fa_chain"; type: "string"; isReadonly: true }
        Property { name: "fa_chain_broken"; type: "string"; isReadonly: true }
        Property { name: "fa_check"; type: "string"; isReadonly: true }
        Property { name: "fa_check_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_check_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_check_square"; type: "string"; isReadonly: true }
        Property { name: "fa_check_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_circle_down"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_circle_left"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_circle_right"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_circle_up"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_down"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_left"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_right"; type: "string"; isReadonly: true }
        Property { name: "fa_chevron_up"; type: "string"; isReadonly: true }
        Property { name: "fa_child"; type: "string"; isReadonly: true }
        Property { name: "fa_chrome"; type: "string"; isReadonly: true }
        Property { name: "fa_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_circle_o_notch"; type: "string"; isReadonly: true }
        Property { name: "fa_circle_thin"; type: "string"; isReadonly: true }
        Property { name: "fa_clipboard"; type: "string"; isReadonly: true }
        Property { name: "fa_clock_o"; type: "string"; isReadonly: true }
        Property { name: "fa_clone"; type: "string"; isReadonly: true }
        Property { name: "fa_close"; type: "string"; isReadonly: true }
        Property { name: "fa_cloud"; type: "string"; isReadonly: true }
        Property { name: "fa_cloud_download"; type: "string"; isReadonly: true }
        Property { name: "fa_cloud_upload"; type: "string"; isReadonly: true }
        Property { name: "fa_cny"; type: "string"; isReadonly: true }
        Property { name: "fa_code"; type: "string"; isReadonly: true }
        Property { name: "fa_code_fork"; type: "string"; isReadonly: true }
        Property { name: "fa_codepen"; type: "string"; isReadonly: true }
        Property { name: "fa_codiepie"; type: "string"; isReadonly: true }
        Property { name: "fa_coffee"; type: "string"; isReadonly: true }
        Property { name: "fa_cog"; type: "string"; isReadonly: true }
        Property { name: "fa_cogs"; type: "string"; isReadonly: true }
        Property { name: "fa_columns"; type: "string"; isReadonly: true }
        Property { name: "fa_comment"; type: "string"; isReadonly: true }
        Property { name: "fa_comment_o"; type: "string"; isReadonly: true }
        Property { name: "fa_commenting"; type: "string"; isReadonly: true }
        Property { name: "fa_commenting_o"; type: "string"; isReadonly: true }
        Property { name: "fa_comments"; type: "string"; isReadonly: true }
        Property { name: "fa_comments_o"; type: "string"; isReadonly: true }
        Property { name: "fa_compass"; type: "string"; isReadonly: true }
        Property { name: "fa_compress"; type: "string"; isReadonly: true }
        Property { name: "fa_connectdevelop"; type: "string"; isReadonly: true }
        Property { name: "fa_contao"; type: "string"; isReadonly: true }
        Property { name: "fa_copy"; type: "string"; isReadonly: true }
        Property { name: "fa_copyright"; type: "string"; isReadonly: true }
        Property { name: "fa_creative_commons"; type: "string"; isReadonly: true }
        Property { name: "fa_credit_card"; type: "string"; isReadonly: true }
        Property { name: "fa_credit_card_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_crop"; type: "string"; isReadonly: true }
        Property { name: "fa_crosshairs"; type: "string"; isReadonly: true }
        Property { name: "fa_css3"; type: "string"; isReadonly: true }
        Property { name: "fa_cube"; type: "string"; isReadonly: true }
        Property { name: "fa_cubes"; type: "string"; isReadonly: true }
        Property { name: "fa_cut"; type: "string"; isReadonly: true }
        Property { name: "fa_cutlery"; type: "string"; isReadonly: true }
        Property { name: "fa_dashboard"; type: "string"; isReadonly: true }
        Property { name: "fa_dashcube"; type: "string"; isReadonly: true }
        Property { name: "fa_database"; type: "string"; isReadonly: true }
        Property { name: "fa_dedent"; type: "string"; isReadonly: true }
        Property { name: "fa_delicious"; type: "string"; isReadonly: true }
        Property { name: "fa_desktop"; type: "string"; isReadonly: true }
        Property { name: "fa_deviantart"; type: "string"; isReadonly: true }
        Property { name: "fa_diamond"; type: "string"; isReadonly: true }
        Property { name: "fa_digg"; type: "string"; isReadonly: true }
        Property { name: "fa_dollar"; type: "string"; isReadonly: true }
        Property { name: "fa_dot_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_download"; type: "string"; isReadonly: true }
        Property { name: "fa_dribbble"; type: "string"; isReadonly: true }
        Property { name: "fa_dropbox"; type: "string"; isReadonly: true }
        Property { name: "fa_drupal"; type: "string"; isReadonly: true }
        Property { name: "fa_edge"; type: "string"; isReadonly: true }
        Property { name: "fa_edit"; type: "string"; isReadonly: true }
        Property { name: "fa_eject"; type: "string"; isReadonly: true }
        Property { name: "fa_ellipsis_h"; type: "string"; isReadonly: true }
        Property { name: "fa_ellipsis_v"; type: "string"; isReadonly: true }
        Property { name: "fa_empire"; type: "string"; isReadonly: true }
        Property { name: "fa_envelope"; type: "string"; isReadonly: true }
        Property { name: "fa_envelope_o"; type: "string"; isReadonly: true }
        Property { name: "fa_envelope_square"; type: "string"; isReadonly: true }
        Property { name: "fa_eraser"; type: "string"; isReadonly: true }
        Property { name: "fa_eur"; type: "string"; isReadonly: true }
        Property { name: "fa_euro"; type: "string"; isReadonly: true }
        Property { name: "fa_exchange"; type: "string"; isReadonly: true }
        Property { name: "fa_exclamation"; type: "string"; isReadonly: true }
        Property { name: "fa_exclamation_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_exclamation_triangle"; type: "string"; isReadonly: true }
        Property { name: "fa_expand"; type: "string"; isReadonly: true }
        Property { name: "fa_expeditedssl"; type: "string"; isReadonly: true }
        Property { name: "fa_external_link"; type: "string"; isReadonly: true }
        Property { name: "fa_external_link_square"; type: "string"; isReadonly: true }
        Property { name: "fa_eye"; type: "string"; isReadonly: true }
        Property { name: "fa_eye_slash"; type: "string"; isReadonly: true }
        Property { name: "fa_eyedropper"; type: "string"; isReadonly: true }
        Property { name: "fa_facebook"; type: "string"; isReadonly: true }
        Property { name: "fa_facebook_f"; type: "string"; isReadonly: true }
        Property { name: "fa_facebook_official"; type: "string"; isReadonly: true }
        Property { name: "fa_facebook_square"; type: "string"; isReadonly: true }
        Property { name: "fa_fast_backward"; type: "string"; isReadonly: true }
        Property { name: "fa_fast_forward"; type: "string"; isReadonly: true }
        Property { name: "fa_fax"; type: "string"; isReadonly: true }
        Property { name: "fa_feed"; type: "string"; isReadonly: true }
        Property { name: "fa_female"; type: "string"; isReadonly: true }
        Property { name: "fa_fighter_jet"; type: "string"; isReadonly: true }
        Property { name: "fa_file"; type: "string"; isReadonly: true }
        Property { name: "fa_file_archive_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_audio_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_code_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_excel_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_image_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_movie_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_pdf_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_photo_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_picture_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_powerpoint_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_sound_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_text"; type: "string"; isReadonly: true }
        Property { name: "fa_file_text_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_video_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_word_o"; type: "string"; isReadonly: true }
        Property { name: "fa_file_zip_o"; type: "string"; isReadonly: true }
        Property { name: "fa_files_o"; type: "string"; isReadonly: true }
        Property { name: "fa_film"; type: "string"; isReadonly: true }
        Property { name: "fa_filter"; type: "string"; isReadonly: true }
        Property { name: "fa_fire"; type: "string"; isReadonly: true }
        Property { name: "fa_fire_extinguisher"; type: "string"; isReadonly: true }
        Property { name: "fa_firefox"; type: "string"; isReadonly: true }
        Property { name: "fa_flag"; type: "string"; isReadonly: true }
        Property { name: "fa_flag_checkered"; type: "string"; isReadonly: true }
        Property { name: "fa_flag_o"; type: "string"; isReadonly: true }
        Property { name: "fa_flash"; type: "string"; isReadonly: true }
        Property { name: "fa_flask"; type: "string"; isReadonly: true }
        Property { name: "fa_flickr"; type: "string"; isReadonly: true }
        Property { name: "fa_floppy_o"; type: "string"; isReadonly: true }
        Property { name: "fa_folder"; type: "string"; isReadonly: true }
        Property { name: "fa_folder_o"; type: "string"; isReadonly: true }
        Property { name: "fa_folder_open"; type: "string"; isReadonly: true }
        Property { name: "fa_folder_open_o"; type: "string"; isReadonly: true }
        Property { name: "fa_font"; type: "string"; isReadonly: true }
        Property { name: "fa_fonticons"; type: "string"; isReadonly: true }
        Property { name: "fa_fort_awesome"; type: "string"; isReadonly: true }
        Property { name: "fa_forumbee"; type: "string"; isReadonly: true }
        Property { name: "fa_forward"; type: "string"; isReadonly: true }
        Property { name: "fa_foursquare"; type: "string"; isReadonly: true }
        Property { name: "fa_frown_o"; type: "string"; isReadonly: true }
        Property { name: "fa_futbol_o"; type: "string"; isReadonly: true }
        Property { name: "fa_gamepad"; type: "string"; isReadonly: true }
        Property { name: "fa_gavel"; type: "string"; isReadonly: true }
        Property { name: "fa_gbp"; type: "string"; isReadonly: true }
        Property { name: "fa_ge"; type: "string"; isReadonly: true }
        Property { name: "fa_gear"; type: "string"; isReadonly: true }
        Property { name: "fa_gears"; type: "string"; isReadonly: true }
        Property { name: "fa_genderless"; type: "string"; isReadonly: true }
        Property { name: "fa_get_pocket"; type: "string"; isReadonly: true }
        Property { name: "fa_gg"; type: "string"; isReadonly: true }
        Property { name: "fa_gg_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_gift"; type: "string"; isReadonly: true }
        Property { name: "fa_git"; type: "string"; isReadonly: true }
        Property { name: "fa_git_square"; type: "string"; isReadonly: true }
        Property { name: "fa_github"; type: "string"; isReadonly: true }
        Property { name: "fa_github_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_github_square"; type: "string"; isReadonly: true }
        Property { name: "fa_gittip"; type: "string"; isReadonly: true }
        Property { name: "fa_glass"; type: "string"; isReadonly: true }
        Property { name: "fa_globe"; type: "string"; isReadonly: true }
        Property { name: "fa_google"; type: "string"; isReadonly: true }
        Property { name: "fa_google_plus"; type: "string"; isReadonly: true }
        Property { name: "fa_google_plus_square"; type: "string"; isReadonly: true }
        Property { name: "fa_google_wallet"; type: "string"; isReadonly: true }
        Property { name: "fa_graduation_cap"; type: "string"; isReadonly: true }
        Property { name: "fa_gratipay"; type: "string"; isReadonly: true }
        Property { name: "fa_group"; type: "string"; isReadonly: true }
        Property { name: "fa_h_square"; type: "string"; isReadonly: true }
        Property { name: "fa_hacker_news"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_grab_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_lizard_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_o_down"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_o_left"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_o_right"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_o_up"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_paper_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_peace_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_pointer_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_rock_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_scissors_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_spock_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hand_stop_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hashtag"; type: "string"; isReadonly: true }
        Property { name: "fa_hdd_o"; type: "string"; isReadonly: true }
        Property { name: "fa_header"; type: "string"; isReadonly: true }
        Property { name: "fa_headphones"; type: "string"; isReadonly: true }
        Property { name: "fa_heart"; type: "string"; isReadonly: true }
        Property { name: "fa_heart_o"; type: "string"; isReadonly: true }
        Property { name: "fa_heartbeat"; type: "string"; isReadonly: true }
        Property { name: "fa_history"; type: "string"; isReadonly: true }
        Property { name: "fa_home"; type: "string"; isReadonly: true }
        Property { name: "fa_hospital_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hotel"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_1"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_2"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_3"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_end"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_half"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_o"; type: "string"; isReadonly: true }
        Property { name: "fa_hourglass_start"; type: "string"; isReadonly: true }
        Property { name: "fa_houzz"; type: "string"; isReadonly: true }
        Property { name: "fa_html5"; type: "string"; isReadonly: true }
        Property { name: "fa_i_cursor"; type: "string"; isReadonly: true }
        Property { name: "fa_ils"; type: "string"; isReadonly: true }
        Property { name: "fa_image"; type: "string"; isReadonly: true }
        Property { name: "fa_inbox"; type: "string"; isReadonly: true }
        Property { name: "fa_indent"; type: "string"; isReadonly: true }
        Property { name: "fa_industry"; type: "string"; isReadonly: true }
        Property { name: "fa_info"; type: "string"; isReadonly: true }
        Property { name: "fa_info_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_inr"; type: "string"; isReadonly: true }
        Property { name: "fa_instagram"; type: "string"; isReadonly: true }
        Property { name: "fa_institution"; type: "string"; isReadonly: true }
        Property { name: "fa_internet_explorer"; type: "string"; isReadonly: true }
        Property { name: "fa_intersex"; type: "string"; isReadonly: true }
        Property { name: "fa_ioxhost"; type: "string"; isReadonly: true }
        Property { name: "fa_italic"; type: "string"; isReadonly: true }
        Property { name: "fa_joomla"; type: "string"; isReadonly: true }
        Property { name: "fa_jpy"; type: "string"; isReadonly: true }
        Property { name: "fa_jsfiddle"; type: "string"; isReadonly: true }
        Property { name: "fa_key"; type: "string"; isReadonly: true }
        Property { name: "fa_keyboard_o"; type: "string"; isReadonly: true }
        Property { name: "fa_krw"; type: "string"; isReadonly: true }
        Property { name: "fa_language"; type: "string"; isReadonly: true }
        Property { name: "fa_laptop"; type: "string"; isReadonly: true }
        Property { name: "fa_lastfm"; type: "string"; isReadonly: true }
        Property { name: "fa_lastfm_square"; type: "string"; isReadonly: true }
        Property { name: "fa_leaf"; type: "string"; isReadonly: true }
        Property { name: "fa_leanpub"; type: "string"; isReadonly: true }
        Property { name: "fa_legal"; type: "string"; isReadonly: true }
        Property { name: "fa_lemon_o"; type: "string"; isReadonly: true }
        Property { name: "fa_level_down"; type: "string"; isReadonly: true }
        Property { name: "fa_level_up"; type: "string"; isReadonly: true }
        Property { name: "fa_life_bouy"; type: "string"; isReadonly: true }
        Property { name: "fa_life_buoy"; type: "string"; isReadonly: true }
        Property { name: "fa_life_ring"; type: "string"; isReadonly: true }
        Property { name: "fa_life_saver"; type: "string"; isReadonly: true }
        Property { name: "fa_lightbulb_o"; type: "string"; isReadonly: true }
        Property { name: "fa_line_chart"; type: "string"; isReadonly: true }
        Property { name: "fa_link"; type: "string"; isReadonly: true }
        Property { name: "fa_linkedin"; type: "string"; isReadonly: true }
        Property { name: "fa_linkedin_square"; type: "string"; isReadonly: true }
        Property { name: "fa_linux"; type: "string"; isReadonly: true }
        Property { name: "fa_list"; type: "string"; isReadonly: true }
        Property { name: "fa_list_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_list_ol"; type: "string"; isReadonly: true }
        Property { name: "fa_list_ul"; type: "string"; isReadonly: true }
        Property { name: "fa_location_arrow"; type: "string"; isReadonly: true }
        Property { name: "fa_lock"; type: "string"; isReadonly: true }
        Property { name: "fa_long_arrow_down"; type: "string"; isReadonly: true }
        Property { name: "fa_long_arrow_left"; type: "string"; isReadonly: true }
        Property { name: "fa_long_arrow_right"; type: "string"; isReadonly: true }
        Property { name: "fa_long_arrow_up"; type: "string"; isReadonly: true }
        Property { name: "fa_magic"; type: "string"; isReadonly: true }
        Property { name: "fa_magnet"; type: "string"; isReadonly: true }
        Property { name: "fa_mail_forward"; type: "string"; isReadonly: true }
        Property { name: "fa_mail_reply"; type: "string"; isReadonly: true }
        Property { name: "fa_mail_reply_all"; type: "string"; isReadonly: true }
        Property { name: "fa_male"; type: "string"; isReadonly: true }
        Property { name: "fa_map"; type: "string"; isReadonly: true }
        Property { name: "fa_map_marker"; type: "string"; isReadonly: true }
        Property { name: "fa_map_o"; type: "string"; isReadonly: true }
        Property { name: "fa_map_pin"; type: "string"; isReadonly: true }
        Property { name: "fa_map_signs"; type: "string"; isReadonly: true }
        Property { name: "fa_mars"; type: "string"; isReadonly: true }
        Property { name: "fa_mars_double"; type: "string"; isReadonly: true }
        Property { name: "fa_mars_stroke"; type: "string"; isReadonly: true }
        Property { name: "fa_mars_stroke_h"; type: "string"; isReadonly: true }
        Property { name: "fa_mars_stroke_v"; type: "string"; isReadonly: true }
        Property { name: "fa_maxcdn"; type: "string"; isReadonly: true }
        Property { name: "fa_meanpath"; type: "string"; isReadonly: true }
        Property { name: "fa_medium"; type: "string"; isReadonly: true }
        Property { name: "fa_medkit"; type: "string"; isReadonly: true }
        Property { name: "fa_meh_o"; type: "string"; isReadonly: true }
        Property { name: "fa_mercury"; type: "string"; isReadonly: true }
        Property { name: "fa_microphone"; type: "string"; isReadonly: true }
        Property { name: "fa_microphone_slash"; type: "string"; isReadonly: true }
        Property { name: "fa_minus"; type: "string"; isReadonly: true }
        Property { name: "fa_minus_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_minus_square"; type: "string"; isReadonly: true }
        Property { name: "fa_minus_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_mixcloud"; type: "string"; isReadonly: true }
        Property { name: "fa_mobile"; type: "string"; isReadonly: true }
        Property { name: "fa_mobile_phone"; type: "string"; isReadonly: true }
        Property { name: "fa_modx"; type: "string"; isReadonly: true }
        Property { name: "fa_money"; type: "string"; isReadonly: true }
        Property { name: "fa_moon_o"; type: "string"; isReadonly: true }
        Property { name: "fa_mortar_board"; type: "string"; isReadonly: true }
        Property { name: "fa_motorcycle"; type: "string"; isReadonly: true }
        Property { name: "fa_mouse_pointer"; type: "string"; isReadonly: true }
        Property { name: "fa_music"; type: "string"; isReadonly: true }
        Property { name: "fa_navicon"; type: "string"; isReadonly: true }
        Property { name: "fa_neuter"; type: "string"; isReadonly: true }
        Property { name: "fa_newspaper_o"; type: "string"; isReadonly: true }
        Property { name: "fa_object_group"; type: "string"; isReadonly: true }
        Property { name: "fa_object_ungroup"; type: "string"; isReadonly: true }
        Property { name: "fa_odnoklassniki"; type: "string"; isReadonly: true }
        Property { name: "fa_odnoklassniki_square"; type: "string"; isReadonly: true }
        Property { name: "fa_opencart"; type: "string"; isReadonly: true }
        Property { name: "fa_openid"; type: "string"; isReadonly: true }
        Property { name: "fa_opera"; type: "string"; isReadonly: true }
        Property { name: "fa_optin_monster"; type: "string"; isReadonly: true }
        Property { name: "fa_outdent"; type: "string"; isReadonly: true }
        Property { name: "fa_pagelines"; type: "string"; isReadonly: true }
        Property { name: "fa_paint_brush"; type: "string"; isReadonly: true }
        Property { name: "fa_paper_plane"; type: "string"; isReadonly: true }
        Property { name: "fa_paper_plane_o"; type: "string"; isReadonly: true }
        Property { name: "fa_paperclip"; type: "string"; isReadonly: true }
        Property { name: "fa_paragraph"; type: "string"; isReadonly: true }
        Property { name: "fa_paste"; type: "string"; isReadonly: true }
        Property { name: "fa_pause"; type: "string"; isReadonly: true }
        Property { name: "fa_pause_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_pause_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_paw"; type: "string"; isReadonly: true }
        Property { name: "fa_paypal"; type: "string"; isReadonly: true }
        Property { name: "fa_pencil"; type: "string"; isReadonly: true }
        Property { name: "fa_pencil_square"; type: "string"; isReadonly: true }
        Property { name: "fa_pencil_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_percent"; type: "string"; isReadonly: true }
        Property { name: "fa_phone"; type: "string"; isReadonly: true }
        Property { name: "fa_phone_square"; type: "string"; isReadonly: true }
        Property { name: "fa_photo"; type: "string"; isReadonly: true }
        Property { name: "fa_picture_o"; type: "string"; isReadonly: true }
        Property { name: "fa_pie_chart"; type: "string"; isReadonly: true }
        Property { name: "fa_pied_piper"; type: "string"; isReadonly: true }
        Property { name: "fa_pied_piper_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_pinterest"; type: "string"; isReadonly: true }
        Property { name: "fa_pinterest_p"; type: "string"; isReadonly: true }
        Property { name: "fa_pinterest_square"; type: "string"; isReadonly: true }
        Property { name: "fa_plane"; type: "string"; isReadonly: true }
        Property { name: "fa_play"; type: "string"; isReadonly: true }
        Property { name: "fa_play_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_play_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_plug"; type: "string"; isReadonly: true }
        Property { name: "fa_plus"; type: "string"; isReadonly: true }
        Property { name: "fa_plus_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_plus_square"; type: "string"; isReadonly: true }
        Property { name: "fa_plus_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_power_off"; type: "string"; isReadonly: true }
        Property { name: "fa_print"; type: "string"; isReadonly: true }
        Property { name: "fa_product_hunt"; type: "string"; isReadonly: true }
        Property { name: "fa_puzzle_piece"; type: "string"; isReadonly: true }
        Property { name: "fa_qq"; type: "string"; isReadonly: true }
        Property { name: "fa_qrcode"; type: "string"; isReadonly: true }
        Property { name: "fa_question"; type: "string"; isReadonly: true }
        Property { name: "fa_question_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_quote_left"; type: "string"; isReadonly: true }
        Property { name: "fa_quote_right"; type: "string"; isReadonly: true }
        Property { name: "fa_ra"; type: "string"; isReadonly: true }
        Property { name: "fa_random"; type: "string"; isReadonly: true }
        Property { name: "fa_rebel"; type: "string"; isReadonly: true }
        Property { name: "fa_recycle"; type: "string"; isReadonly: true }
        Property { name: "fa_reddit"; type: "string"; isReadonly: true }
        Property { name: "fa_reddit_alien"; type: "string"; isReadonly: true }
        Property { name: "fa_reddit_square"; type: "string"; isReadonly: true }
        Property { name: "fa_refresh"; type: "string"; isReadonly: true }
        Property { name: "fa_registered"; type: "string"; isReadonly: true }
        Property { name: "fa_remove"; type: "string"; isReadonly: true }
        Property { name: "fa_renren"; type: "string"; isReadonly: true }
        Property { name: "fa_reorder"; type: "string"; isReadonly: true }
        Property { name: "fa_repeat"; type: "string"; isReadonly: true }
        Property { name: "fa_reply"; type: "string"; isReadonly: true }
        Property { name: "fa_reply_all"; type: "string"; isReadonly: true }
        Property { name: "fa_retweet"; type: "string"; isReadonly: true }
        Property { name: "fa_rmb"; type: "string"; isReadonly: true }
        Property { name: "fa_road"; type: "string"; isReadonly: true }
        Property { name: "fa_rocket"; type: "string"; isReadonly: true }
        Property { name: "fa_rotate_left"; type: "string"; isReadonly: true }
        Property { name: "fa_rotate_right"; type: "string"; isReadonly: true }
        Property { name: "fa_rouble"; type: "string"; isReadonly: true }
        Property { name: "fa_rss"; type: "string"; isReadonly: true }
        Property { name: "fa_rss_square"; type: "string"; isReadonly: true }
        Property { name: "fa_rub"; type: "string"; isReadonly: true }
        Property { name: "fa_ruble"; type: "string"; isReadonly: true }
        Property { name: "fa_rupee"; type: "string"; isReadonly: true }
        Property { name: "fa_safari"; type: "string"; isReadonly: true }
        Property { name: "fa_save"; type: "string"; isReadonly: true }
        Property { name: "fa_scissors"; type: "string"; isReadonly: true }
        Property { name: "fa_scribd"; type: "string"; isReadonly: true }
        Property { name: "fa_search"; type: "string"; isReadonly: true }
        Property { name: "fa_search_minus"; type: "string"; isReadonly: true }
        Property { name: "fa_search_plus"; type: "string"; isReadonly: true }
        Property { name: "fa_sellsy"; type: "string"; isReadonly: true }
        Property { name: "fa_send"; type: "string"; isReadonly: true }
        Property { name: "fa_send_o"; type: "string"; isReadonly: true }
        Property { name: "fa_server"; type: "string"; isReadonly: true }
        Property { name: "fa_share"; type: "string"; isReadonly: true }
        Property { name: "fa_share_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_share_alt_square"; type: "string"; isReadonly: true }
        Property { name: "fa_share_square"; type: "string"; isReadonly: true }
        Property { name: "fa_share_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_shekel"; type: "string"; isReadonly: true }
        Property { name: "fa_sheqel"; type: "string"; isReadonly: true }
        Property { name: "fa_shield"; type: "string"; isReadonly: true }
        Property { name: "fa_ship"; type: "string"; isReadonly: true }
        Property { name: "fa_shirtsinbulk"; type: "string"; isReadonly: true }
        Property { name: "fa_shopping_bag"; type: "string"; isReadonly: true }
        Property { name: "fa_shopping_basket"; type: "string"; isReadonly: true }
        Property { name: "fa_shopping_cart"; type: "string"; isReadonly: true }
        Property { name: "fa_sign_in"; type: "string"; isReadonly: true }
        Property { name: "fa_sign_out"; type: "string"; isReadonly: true }
        Property { name: "fa_signal"; type: "string"; isReadonly: true }
        Property { name: "fa_simplybuilt"; type: "string"; isReadonly: true }
        Property { name: "fa_sitemap"; type: "string"; isReadonly: true }
        Property { name: "fa_skyatlas"; type: "string"; isReadonly: true }
        Property { name: "fa_skype"; type: "string"; isReadonly: true }
        Property { name: "fa_slack"; type: "string"; isReadonly: true }
        Property { name: "fa_sliders"; type: "string"; isReadonly: true }
        Property { name: "fa_slideshare"; type: "string"; isReadonly: true }
        Property { name: "fa_smile_o"; type: "string"; isReadonly: true }
        Property { name: "fa_soccer_ball_o"; type: "string"; isReadonly: true }
        Property { name: "fa_sort"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_alpha_asc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_alpha_desc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_amount_asc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_amount_desc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_asc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_desc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_down"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_numeric_asc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_numeric_desc"; type: "string"; isReadonly: true }
        Property { name: "fa_sort_up"; type: "string"; isReadonly: true }
        Property { name: "fa_soundcloud"; type: "string"; isReadonly: true }
        Property { name: "fa_space_shuttle"; type: "string"; isReadonly: true }
        Property { name: "fa_spinner"; type: "string"; isReadonly: true }
        Property { name: "fa_spoon"; type: "string"; isReadonly: true }
        Property { name: "fa_spotify"; type: "string"; isReadonly: true }
        Property { name: "fa_square"; type: "string"; isReadonly: true }
        Property { name: "fa_square_o"; type: "string"; isReadonly: true }
        Property { name: "fa_stack_exchange"; type: "string"; isReadonly: true }
        Property { name: "fa_stack_overflow"; type: "string"; isReadonly: true }
        Property { name: "fa_star"; type: "string"; isReadonly: true }
        Property { name: "fa_star_half"; type: "string"; isReadonly: true }
        Property { name: "fa_star_half_empty"; type: "string"; isReadonly: true }
        Property { name: "fa_star_half_full"; type: "string"; isReadonly: true }
        Property { name: "fa_star_half_o"; type: "string"; isReadonly: true }
        Property { name: "fa_star_o"; type: "string"; isReadonly: true }
        Property { name: "fa_steam"; type: "string"; isReadonly: true }
        Property { name: "fa_steam_square"; type: "string"; isReadonly: true }
        Property { name: "fa_step_backward"; type: "string"; isReadonly: true }
        Property { name: "fa_step_forward"; type: "string"; isReadonly: true }
        Property { name: "fa_stethoscope"; type: "string"; isReadonly: true }
        Property { name: "fa_sticky_note"; type: "string"; isReadonly: true }
        Property { name: "fa_sticky_note_o"; type: "string"; isReadonly: true }
        Property { name: "fa_stop"; type: "string"; isReadonly: true }
        Property { name: "fa_stop_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_stop_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_street_view"; type: "string"; isReadonly: true }
        Property { name: "fa_strikethrough"; type: "string"; isReadonly: true }
        Property { name: "fa_stumbleupon"; type: "string"; isReadonly: true }
        Property { name: "fa_stumbleupon_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_subscript"; type: "string"; isReadonly: true }
        Property { name: "fa_subway"; type: "string"; isReadonly: true }
        Property { name: "fa_suitcase"; type: "string"; isReadonly: true }
        Property { name: "fa_sun_o"; type: "string"; isReadonly: true }
        Property { name: "fa_superscript"; type: "string"; isReadonly: true }
        Property { name: "fa_support"; type: "string"; isReadonly: true }
        Property { name: "fa_table"; type: "string"; isReadonly: true }
        Property { name: "fa_tablet"; type: "string"; isReadonly: true }
        Property { name: "fa_tachometer"; type: "string"; isReadonly: true }
        Property { name: "fa_tag"; type: "string"; isReadonly: true }
        Property { name: "fa_tags"; type: "string"; isReadonly: true }
        Property { name: "fa_tasks"; type: "string"; isReadonly: true }
        Property { name: "fa_taxi"; type: "string"; isReadonly: true }
        Property { name: "fa_television"; type: "string"; isReadonly: true }
        Property { name: "fa_tencent_weibo"; type: "string"; isReadonly: true }
        Property { name: "fa_terminal"; type: "string"; isReadonly: true }
        Property { name: "fa_text_height"; type: "string"; isReadonly: true }
        Property { name: "fa_text_width"; type: "string"; isReadonly: true }
        Property { name: "fa_th"; type: "string"; isReadonly: true }
        Property { name: "fa_th_large"; type: "string"; isReadonly: true }
        Property { name: "fa_th_list"; type: "string"; isReadonly: true }
        Property { name: "fa_thumb_tack"; type: "string"; isReadonly: true }
        Property { name: "fa_thumbs_down"; type: "string"; isReadonly: true }
        Property { name: "fa_thumbs_o_down"; type: "string"; isReadonly: true }
        Property { name: "fa_thumbs_o_up"; type: "string"; isReadonly: true }
        Property { name: "fa_thumbs_up"; type: "string"; isReadonly: true }
        Property { name: "fa_ticket"; type: "string"; isReadonly: true }
        Property { name: "fa_times"; type: "string"; isReadonly: true }
        Property { name: "fa_times_circle"; type: "string"; isReadonly: true }
        Property { name: "fa_times_circle_o"; type: "string"; isReadonly: true }
        Property { name: "fa_tint"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_down"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_left"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_off"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_on"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_right"; type: "string"; isReadonly: true }
        Property { name: "fa_toggle_up"; type: "string"; isReadonly: true }
        Property { name: "fa_trademark"; type: "string"; isReadonly: true }
        Property { name: "fa_train"; type: "string"; isReadonly: true }
        Property { name: "fa_transgender"; type: "string"; isReadonly: true }
        Property { name: "fa_transgender_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_trash"; type: "string"; isReadonly: true }
        Property { name: "fa_trash_o"; type: "string"; isReadonly: true }
        Property { name: "fa_tree"; type: "string"; isReadonly: true }
        Property { name: "fa_trello"; type: "string"; isReadonly: true }
        Property { name: "fa_tripadvisor"; type: "string"; isReadonly: true }
        Property { name: "fa_trophy"; type: "string"; isReadonly: true }
        Property { name: "fa_truck"; type: "string"; isReadonly: true }
        Property { name: "fa_try"; type: "string"; isReadonly: true }
        Property { name: "fa_tty"; type: "string"; isReadonly: true }
        Property { name: "fa_tumblr"; type: "string"; isReadonly: true }
        Property { name: "fa_tumblr_square"; type: "string"; isReadonly: true }
        Property { name: "fa_turkish_lira"; type: "string"; isReadonly: true }
        Property { name: "fa_tv"; type: "string"; isReadonly: true }
        Property { name: "fa_twitch"; type: "string"; isReadonly: true }
        Property { name: "fa_twitter"; type: "string"; isReadonly: true }
        Property { name: "fa_twitter_square"; type: "string"; isReadonly: true }
        Property { name: "fa_umbrella"; type: "string"; isReadonly: true }
        Property { name: "fa_underline"; type: "string"; isReadonly: true }
        Property { name: "fa_undo"; type: "string"; isReadonly: true }
        Property { name: "fa_university"; type: "string"; isReadonly: true }
        Property { name: "fa_unlink"; type: "string"; isReadonly: true }
        Property { name: "fa_unlock"; type: "string"; isReadonly: true }
        Property { name: "fa_unlock_alt"; type: "string"; isReadonly: true }
        Property { name: "fa_unsorted"; type: "string"; isReadonly: true }
        Property { name: "fa_upload"; type: "string"; isReadonly: true }
        Property { name: "fa_usb"; type: "string"; isReadonly: true }
        Property { name: "fa_usd"; type: "string"; isReadonly: true }
        Property { name: "fa_user"; type: "string"; isReadonly: true }
        Property { name: "fa_user_md"; type: "string"; isReadonly: true }
        Property { name: "fa_user_plus"; type: "string"; isReadonly: true }
        Property { name: "fa_user_secret"; type: "string"; isReadonly: true }
        Property { name: "fa_user_times"; type: "string"; isReadonly: true }
        Property { name: "fa_users"; type: "string"; isReadonly: true }
        Property { name: "fa_venus"; type: "string"; isReadonly: true }
        Property { name: "fa_venus_double"; type: "string"; isReadonly: true }
        Property { name: "fa_venus_mars"; type: "string"; isReadonly: true }
        Property { name: "fa_viacoin"; type: "string"; isReadonly: true }
        Property { name: "fa_video_camera"; type: "string"; isReadonly: true }
        Property { name: "fa_vimeo"; type: "string"; isReadonly: true }
        Property { name: "fa_vimeo_square"; type: "string"; isReadonly: true }
        Property { name: "fa_vine"; type: "string"; isReadonly: true }
        Property { name: "fa_vk"; type: "string"; isReadonly: true }
        Property { name: "fa_volume_down"; type: "string"; isReadonly: true }
        Property { name: "fa_volume_off"; type: "string"; isReadonly: true }
        Property { name: "fa_volume_up"; type: "string"; isReadonly: true }
        Property { name: "fa_warning"; type: "string"; isReadonly: true }
        Property { name: "fa_wechat"; type: "string"; isReadonly: true }
        Property { name: "fa_weibo"; type: "string"; isReadonly: true }
        Property { name: "fa_weixin"; type: "string"; isReadonly: true }
        Property { name: "fa_whatsapp"; type: "string"; isReadonly: true }
        Property { name: "fa_wheelchair"; type: "string"; isReadonly: true }
        Property { name: "fa_wifi"; type: "string"; isReadonly: true }
        Property { name: "fa_wikipedia_w"; type: "string"; isReadonly: true }
        Property { name: "fa_windows"; type: "string"; isReadonly: true }
        Property { name: "fa_won"; type: "string"; isReadonly: true }
        Property { name: "fa_wordpress"; type: "string"; isReadonly: true }
        Property { name: "fa_wrench"; type: "string"; isReadonly: true }
        Property { name: "fa_xing"; type: "string"; isReadonly: true }
        Property { name: "fa_xing_square"; type: "string"; isReadonly: true }
        Property { name: "fa_y_combinator"; type: "string"; isReadonly: true }
        Property { name: "fa_y_combinator_square"; type: "string"; isReadonly: true }
        Property { name: "fa_yahoo"; type: "string"; isReadonly: true }
        Property { name: "fa_yc"; type: "string"; isReadonly: true }
        Property { name: "fa_yc_square"; type: "string"; isReadonly: true }
        Property { name: "fa_yelp"; type: "string"; isReadonly: true }
        Property { name: "fa_yen"; type: "string"; isReadonly: true }
        Property { name: "fa_youtube"; type: "string"; isReadonly: true }
        Property { name: "fa_youtube_play"; type: "string"; isReadonly: true }
        Property { name: "fa_youtube_square"; type: "string"; isReadonly: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.Controls.Material.impl/BoxShadow 2.0"
        exports: ["QtQuick.Controls.Material.impl/BoxShadow 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "offsetX"; type: "int" }
        Property { name: "offsetY"; type: "int" }
        Property { name: "blurRadius"; type: "int" }
        Property { name: "spreadRadius"; type: "int" }
        Property { name: "source"; type: "QQuickItem"; isPointer: true }
        Property { name: "fullWidth"; type: "bool" }
        Property { name: "fullHeight"; type: "bool" }
        Property { name: "glowRadius"; type: "double" }
        Property { name: "spread"; type: "double" }
        Property { name: "color"; type: "QColor" }
        Property { name: "cornerRadius"; type: "double" }
        Property { name: "cached"; type: "bool" }
    }
    Component {
        prototype: "QQuickBusyIndicator"
        name: "QtQuick.Controls/BusyIndicator 2.0"
        exports: ["QtQuick.Controls/BusyIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickButton"
        name: "QtQuick.Controls/Button 2.0"
        exports: ["QtQuick.Controls/Button 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickButtonGroup"
        name: "QtQuick.Controls/ButtonGroup 2.0"
        exports: ["QtQuick.Controls/ButtonGroup 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
    }
    Component {
        prototype: "QQuickCheckBox"
        name: "QtQuick.Controls/CheckBox 2.0"
        exports: ["QtQuick.Controls/CheckBox 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickCheckDelegate"
        name: "QtQuick.Controls/CheckDelegate 2.0"
        exports: ["QtQuick.Controls/CheckDelegate 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickRectangle"
        name: "QtQuick.Controls.Material.impl/CheckIndicator 2.0"
        exports: ["QtQuick.Controls.Material.impl/CheckIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "QtQuick.Controls.Universal.impl/CheckIndicator 2.0"
        exports: ["QtQuick.Controls.Universal.impl/CheckIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
        Property { name: "partiallyChecked"; type: "bool"; isReadonly: true }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "QtQuick.Controls.impl/CheckIndicator 2.0"
        exports: ["QtQuick.Controls.impl/CheckIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras.Private/CircularButton 1.0"
        exports: ["QtQuick.Extras.Private/CircularButton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_51"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup1"; isPointer: true }
        Property { name: "action"; type: "QQuickAction1"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction1"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction1"; isReadonly: true; isPointer: true }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.Extras.Private/CircularButtonStyleHelper 1.0"
        exports: ["QtQuick.Extras.Private/CircularButtonStyleHelper 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
        Property { name: "buttonColorUpTop"; type: "QColor" }
        Property { name: "buttonColorUpBottom"; type: "QColor" }
        Property { name: "buttonColorDownTop"; type: "QColor" }
        Property { name: "buttonColorDownBottom"; type: "QColor" }
        Property { name: "outerArcColorTop"; type: "QColor" }
        Property { name: "outerArcColorBottom"; type: "QColor" }
        Property { name: "innerArcColorTop"; type: "QColor" }
        Property { name: "innerArcColorBottom"; type: "QColor" }
        Property { name: "innerArcColorBottomStop"; type: "double" }
        Property { name: "shineColor"; type: "QColor" }
        Property { name: "smallestAxis"; type: "double" }
        Property { name: "outerArcLineWidth"; type: "double" }
        Property { name: "innerArcLineWidth"; type: "double" }
        Property { name: "shineArcLineWidth"; type: "double" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "textColorUp"; type: "QColor" }
        Property { name: "textColorDown"; type: "QColor" }
        Property { name: "textRaisedColorUp"; type: "QColor" }
        Property { name: "textRaisedColorDown"; type: "QColor" }
        Property { name: "radius"; type: "double" }
        Property { name: "halfRadius"; type: "double" }
        Property { name: "outerArcRadius"; type: "double" }
        Property { name: "innerArcRadius"; type: "double" }
        Property { name: "shineArcRadius"; type: "double" }
        Property { name: "zeroAngle"; type: "double" }
        Property { name: "buttonColorTop"; type: "QColor" }
        Property { name: "buttonColorBottom"; type: "QColor" }
        Method {
            name: "toPixels"
            type: "QVariant"
            Parameter { name: "percentageOfSmallestAxis"; type: "QVariant" }
        }
        Method {
            name: "paintBackground"
            type: "QVariant"
            Parameter { name: "ctx"; type: "QVariant" }
        }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/CircularGauge 1.0"
        exports: ["QtQuick.Extras/CircularGauge 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "tickmarksVisible"; type: "bool" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "value"; type: "double" }
        Property { name: "stepSize"; type: "double" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras.Private/CircularTickmarkLabel 1.0"
        exports: ["QtQuick.Extras.Private/CircularTickmarkLabel 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "minimumValueAngle"; type: "double" }
        Property { name: "maximumValueAngle"; type: "double" }
        Property { name: "angleRange"; type: "double"; isReadonly: true }
        Property { name: "tickmarkStepSize"; type: "double" }
        Property { name: "tickmarkInset"; type: "double" }
        Property { name: "tickmarkCount"; type: "int"; isReadonly: true }
        Property { name: "minorTickmarkCount"; type: "int" }
        Property { name: "minorTickmarkInset"; type: "double" }
        Property { name: "labelInset"; type: "double" }
        Property { name: "labelStepSize"; type: "double" }
        Property { name: "labelCount"; type: "int"; isReadonly: true }
        Property { name: "__tickmarkCount"; type: "double"; isReadonly: true }
        Property { name: "tickmarksVisible"; type: "bool" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "stepSize"; type: "double" }
        Method {
            name: "valueToAngle"
            type: "QVariant"
            Parameter { name: "value"; type: "QVariant" }
        }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickColorDialog"
        name: "QtQuick.Dialogs/ColorDialog 1.0"
        exports: ["QtQuick.Dialogs/ColorDialog 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentItem"
        Property { name: "__valueSet"; type: "bool" }
        Method { name: "__setControlsFromColor"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickComboBox"
        name: "QtQuick.Controls/ComboBox 2.0"
        exports: ["QtQuick.Controls/ComboBox 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickContainer"
        name: "QtQuick.Controls/Container 2.0"
        exports: ["QtQuick.Controls/Container 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickControl"
        name: "QtQuick.Controls/Control 2.0"
        exports: ["QtQuick.Controls/Control 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickRectangle"
        name: "QtQuick.Controls.Material.impl/CursorDelegate 2.0"
        exports: ["QtQuick.Controls.Material.impl/CursorDelegate 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/DelayButton 1.0"
        exports: ["QtQuick.Extras/DelayButton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "delay"; type: "int" }
        Property { name: "__progress"; type: "double" }
        Property { name: "progress"; type: "double"; isReadonly: true }
        Signal { name: "activated" }
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_51"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup1"; isPointer: true }
        Property { name: "action"; type: "QQuickAction1"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction1"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction1"; isReadonly: true; isPointer: true }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickDelayButton"
        name: "QtQuick.Controls/DelayButton 2.2"
        exports: ["QtQuick.Controls/DelayButton 2.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickDial"
        name: "QtQuick.Controls/Dial 2.0"
        exports: ["QtQuick.Controls/Dial 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/Dial 1.1"
        exports: ["QtQuick.Extras/Dial 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "__wrap"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "tickmarksVisible"; type: "bool" }
        Property { name: "value"; type: "double" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "stepSize"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/Dial 1.0"
        exports: ["QtQuick.Extras/Dial 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "__wrap"; type: "bool" }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "tickmarksVisible"; type: "bool" }
        Property { name: "value"; type: "double" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Property { name: "stepSize"; type: "double" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickDialog"
        name: "QtQuick.Controls/Dialog 2.1"
        exports: ["QtQuick.Controls/Dialog 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickDialog1"
        name: "QtQuick.Dialogs/Dialog 1.2"
        exports: ["QtQuick.Dialogs/Dialog 1.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        defaultProperty: "data"
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Method { name: "setupButtons"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickDialogButtonBox"
        name: "QtQuick.Controls/DialogButtonBox 2.1"
        exports: ["QtQuick.Controls/DialogButtonBox 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickDrawer"
        name: "QtQuick.Controls/Drawer 2.0"
        exports: ["QtQuick.Controls/Drawer 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.Controls.Material.impl/ElevationEffect 2.0"
        exports: ["QtQuick.Controls.Material.impl/ElevationEffect 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "source"; type: "QVariant" }
        Property { name: "elevation"; type: "int" }
        Property { name: "fullWidth"; type: "bool" }
        Property { name: "fullHeight"; type: "bool" }
        Property { name: "sourceItem"; type: "QQuickItem"; isReadonly: true; isPointer: true }
        Property { name: "_shadows"; type: "QVariant"; isReadonly: true }
        Property { name: "_shadow"; type: "QVariant"; isReadonly: true }
    }
    Component {
        prototype: "QQuickFileDialog"
        name: "QtQuick.Dialogs/FileDialog 1.0"
        exports: ["QtQuick.Dialogs/FileDialog 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentItem"
        Property { name: "settings"; type: "QQmlSettings"; isPointer: true }
        Property { name: "showFocusHighlight"; type: "bool" }
        Property { name: "palette"; type: "QQuickSystemPalette"; isPointer: true }
        Property { name: "favoriteFolders"; type: "QVariant" }
        Property { name: "dirUpAction"; type: "QQuickAction1"; isPointer: true }
        Method {
            name: "dirDown"
            type: "QVariant"
            Parameter { name: "path"; type: "QVariant" }
        }
        Method { name: "dirUp"; type: "QVariant" }
        Method { name: "acceptSelection"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickFontDialog"
        name: "QtQuick.Dialogs/FontDialog 1.1"
        exports: ["QtQuick.Dialogs/FontDialog 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "contentItem"
        Property { name: "font"; type: "QFont" }
        Property { name: "currentFont"; type: "QFont" }
    }
    Component {
        prototype: "QQuickFrame"
        name: "QtQuick.Controls/Frame 2.0"
        exports: ["QtQuick.Controls/Frame 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/Gauge 1.0"
        exports: ["QtQuick.Extras/Gauge 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "orientation"; type: "int" }
        Property { name: "tickmarkAlignment"; type: "int" }
        Property { name: "__tickmarkAlignment"; type: "int" }
        Property { name: "__tickmarksInside"; type: "bool" }
        Property { name: "tickmarkStepSize"; type: "double" }
        Property { name: "minorTickmarkCount"; type: "int" }
        Property { name: "formatValue"; type: "QVariant" }
        Property { name: "minimumValue"; type: "double" }
        Property { name: "value"; type: "double" }
        Property { name: "maximumValue"; type: "double" }
        Property { name: "font"; type: "QFont" }
        Property { name: "__hiddenText"; type: "QQuickText"; isReadonly: true; isPointer: true }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickGroupBox"
        name: "QtQuick.Controls/GroupBox 2.0"
        exports: ["QtQuick.Controls/GroupBox 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickItemDelegate"
        name: "QtQuick.Controls/ItemDelegate 2.0"
        exports: ["QtQuick.Controls/ItemDelegate 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickLabel"
        name: "QtQuick.Controls/Label 2.0"
        exports: ["QtQuick.Controls/Label 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QObject"
        name: "MaterialIcons 1.0"
        exports: ["MaterialIcons 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        Property { name: "family"; type: "string"; isReadonly: true }
        Property { name: "mi_3d_rotation"; type: "string"; isReadonly: true }
        Property { name: "mi_ac_unit"; type: "string"; isReadonly: true }
        Property { name: "mi_access_alarm"; type: "string"; isReadonly: true }
        Property { name: "mi_access_alarms"; type: "string"; isReadonly: true }
        Property { name: "mi_access_time"; type: "string"; isReadonly: true }
        Property { name: "mi_accessibility"; type: "string"; isReadonly: true }
        Property { name: "mi_accessible"; type: "string"; isReadonly: true }
        Property { name: "mi_account_balance"; type: "string"; isReadonly: true }
        Property { name: "mi_account_balance_wallet"; type: "string"; isReadonly: true }
        Property { name: "mi_account_box"; type: "string"; isReadonly: true }
        Property { name: "mi_account_circle"; type: "string"; isReadonly: true }
        Property { name: "mi_adb"; type: "string"; isReadonly: true }
        Property { name: "mi_add"; type: "string"; isReadonly: true }
        Property { name: "mi_add_a_photo"; type: "string"; isReadonly: true }
        Property { name: "mi_add_alarm"; type: "string"; isReadonly: true }
        Property { name: "mi_add_alert"; type: "string"; isReadonly: true }
        Property { name: "mi_add_box"; type: "string"; isReadonly: true }
        Property { name: "mi_add_circle"; type: "string"; isReadonly: true }
        Property { name: "mi_add_circle_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_add_location"; type: "string"; isReadonly: true }
        Property { name: "mi_add_shopping_cart"; type: "string"; isReadonly: true }
        Property { name: "mi_add_to_photos"; type: "string"; isReadonly: true }
        Property { name: "mi_add_to_queue"; type: "string"; isReadonly: true }
        Property { name: "mi_adjust"; type: "string"; isReadonly: true }
        Property { name: "mi_airline_seat_flat"; type: "string"; isReadonly: true }
        Property { name: "mi_airline_seat_flat_angled"; type: "string"; isReadonly: true }
        Property { name: "mi_airline_seat_individual_suite"; type: "string"; isReadonly: true }
        Property { name: "mi_airline_seat_legroom_extra"; type: "string"; isReadonly: true }
        Property { name: "mi_airline_seat_legroom_normal"; type: "string"; isReadonly: true }
        Property { name: "mi_airline_seat_legroom_reduced"; type: "string"; isReadonly: true }
        Property { name: "mi_airline_seat_recline_extra"; type: "string"; isReadonly: true }
        Property { name: "mi_airline_seat_recline_normal"; type: "string"; isReadonly: true }
        Property { name: "mi_airplanemode_active"; type: "string"; isReadonly: true }
        Property { name: "mi_airplanemode_inactive"; type: "string"; isReadonly: true }
        Property { name: "mi_airplay"; type: "string"; isReadonly: true }
        Property { name: "mi_airport_shuttle"; type: "string"; isReadonly: true }
        Property { name: "mi_alarm"; type: "string"; isReadonly: true }
        Property { name: "mi_alarm_add"; type: "string"; isReadonly: true }
        Property { name: "mi_alarm_off"; type: "string"; isReadonly: true }
        Property { name: "mi_alarm_on"; type: "string"; isReadonly: true }
        Property { name: "mi_album"; type: "string"; isReadonly: true }
        Property { name: "mi_all_inclusive"; type: "string"; isReadonly: true }
        Property { name: "mi_all_out"; type: "string"; isReadonly: true }
        Property { name: "mi_android"; type: "string"; isReadonly: true }
        Property { name: "mi_announcement"; type: "string"; isReadonly: true }
        Property { name: "mi_apps"; type: "string"; isReadonly: true }
        Property { name: "mi_archive"; type: "string"; isReadonly: true }
        Property { name: "mi_arrow_back"; type: "string"; isReadonly: true }
        Property { name: "mi_arrow_downward"; type: "string"; isReadonly: true }
        Property { name: "mi_arrow_drop_down"; type: "string"; isReadonly: true }
        Property { name: "mi_arrow_drop_down_circle"; type: "string"; isReadonly: true }
        Property { name: "mi_arrow_drop_up"; type: "string"; isReadonly: true }
        Property { name: "mi_arrow_forward"; type: "string"; isReadonly: true }
        Property { name: "mi_arrow_upward"; type: "string"; isReadonly: true }
        Property { name: "mi_art_track"; type: "string"; isReadonly: true }
        Property { name: "mi_aspect_ratio"; type: "string"; isReadonly: true }
        Property { name: "mi_assessment"; type: "string"; isReadonly: true }
        Property { name: "mi_assignment"; type: "string"; isReadonly: true }
        Property { name: "mi_assignment_ind"; type: "string"; isReadonly: true }
        Property { name: "mi_assignment_late"; type: "string"; isReadonly: true }
        Property { name: "mi_assignment_return"; type: "string"; isReadonly: true }
        Property { name: "mi_assignment_returned"; type: "string"; isReadonly: true }
        Property { name: "mi_assignment_turned_in"; type: "string"; isReadonly: true }
        Property { name: "mi_assistant"; type: "string"; isReadonly: true }
        Property { name: "mi_assistant_photo"; type: "string"; isReadonly: true }
        Property { name: "mi_attach_file"; type: "string"; isReadonly: true }
        Property { name: "mi_attach_money"; type: "string"; isReadonly: true }
        Property { name: "mi_attachment"; type: "string"; isReadonly: true }
        Property { name: "mi_audiotrack"; type: "string"; isReadonly: true }
        Property { name: "mi_autorenew"; type: "string"; isReadonly: true }
        Property { name: "mi_av_timer"; type: "string"; isReadonly: true }
        Property { name: "mi_backspace"; type: "string"; isReadonly: true }
        Property { name: "mi_backup"; type: "string"; isReadonly: true }
        Property { name: "mi_battery_alert"; type: "string"; isReadonly: true }
        Property { name: "mi_battery_charging_full"; type: "string"; isReadonly: true }
        Property { name: "mi_battery_full"; type: "string"; isReadonly: true }
        Property { name: "mi_battery_std"; type: "string"; isReadonly: true }
        Property { name: "mi_battery_unknown"; type: "string"; isReadonly: true }
        Property { name: "mi_beach_access"; type: "string"; isReadonly: true }
        Property { name: "mi_beenhere"; type: "string"; isReadonly: true }
        Property { name: "mi_block"; type: "string"; isReadonly: true }
        Property { name: "mi_bluetooth"; type: "string"; isReadonly: true }
        Property { name: "mi_bluetooth_audio"; type: "string"; isReadonly: true }
        Property { name: "mi_bluetooth_connected"; type: "string"; isReadonly: true }
        Property { name: "mi_bluetooth_disabled"; type: "string"; isReadonly: true }
        Property { name: "mi_bluetooth_searching"; type: "string"; isReadonly: true }
        Property { name: "mi_blur_circular"; type: "string"; isReadonly: true }
        Property { name: "mi_blur_linear"; type: "string"; isReadonly: true }
        Property { name: "mi_blur_off"; type: "string"; isReadonly: true }
        Property { name: "mi_blur_on"; type: "string"; isReadonly: true }
        Property { name: "mi_book"; type: "string"; isReadonly: true }
        Property { name: "mi_bookmark"; type: "string"; isReadonly: true }
        Property { name: "mi_bookmark_border"; type: "string"; isReadonly: true }
        Property { name: "mi_border_all"; type: "string"; isReadonly: true }
        Property { name: "mi_border_bottom"; type: "string"; isReadonly: true }
        Property { name: "mi_border_clear"; type: "string"; isReadonly: true }
        Property { name: "mi_border_color"; type: "string"; isReadonly: true }
        Property { name: "mi_border_horizontal"; type: "string"; isReadonly: true }
        Property { name: "mi_border_inner"; type: "string"; isReadonly: true }
        Property { name: "mi_border_left"; type: "string"; isReadonly: true }
        Property { name: "mi_border_outer"; type: "string"; isReadonly: true }
        Property { name: "mi_border_right"; type: "string"; isReadonly: true }
        Property { name: "mi_border_style"; type: "string"; isReadonly: true }
        Property { name: "mi_border_top"; type: "string"; isReadonly: true }
        Property { name: "mi_border_vertical"; type: "string"; isReadonly: true }
        Property { name: "mi_branding_watermark"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_1"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_2"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_3"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_4"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_5"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_6"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_7"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_auto"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_high"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_low"; type: "string"; isReadonly: true }
        Property { name: "mi_brightness_medium"; type: "string"; isReadonly: true }
        Property { name: "mi_broken_image"; type: "string"; isReadonly: true }
        Property { name: "mi_brush"; type: "string"; isReadonly: true }
        Property { name: "mi_bubble_chart"; type: "string"; isReadonly: true }
        Property { name: "mi_bug_report"; type: "string"; isReadonly: true }
        Property { name: "mi_build"; type: "string"; isReadonly: true }
        Property { name: "mi_burst_mode"; type: "string"; isReadonly: true }
        Property { name: "mi_business"; type: "string"; isReadonly: true }
        Property { name: "mi_business_center"; type: "string"; isReadonly: true }
        Property { name: "mi_cached"; type: "string"; isReadonly: true }
        Property { name: "mi_cake"; type: "string"; isReadonly: true }
        Property { name: "mi_call"; type: "string"; isReadonly: true }
        Property { name: "mi_call_end"; type: "string"; isReadonly: true }
        Property { name: "mi_call_made"; type: "string"; isReadonly: true }
        Property { name: "mi_call_merge"; type: "string"; isReadonly: true }
        Property { name: "mi_call_missed"; type: "string"; isReadonly: true }
        Property { name: "mi_call_missed_outgoing"; type: "string"; isReadonly: true }
        Property { name: "mi_call_received"; type: "string"; isReadonly: true }
        Property { name: "mi_call_split"; type: "string"; isReadonly: true }
        Property { name: "mi_call_to_action"; type: "string"; isReadonly: true }
        Property { name: "mi_camera"; type: "string"; isReadonly: true }
        Property { name: "mi_camera_alt"; type: "string"; isReadonly: true }
        Property { name: "mi_camera_enhance"; type: "string"; isReadonly: true }
        Property { name: "mi_camera_front"; type: "string"; isReadonly: true }
        Property { name: "mi_camera_rear"; type: "string"; isReadonly: true }
        Property { name: "mi_camera_roll"; type: "string"; isReadonly: true }
        Property { name: "mi_cancel"; type: "string"; isReadonly: true }
        Property { name: "mi_card_giftcard"; type: "string"; isReadonly: true }
        Property { name: "mi_card_membership"; type: "string"; isReadonly: true }
        Property { name: "mi_card_travel"; type: "string"; isReadonly: true }
        Property { name: "mi_casino"; type: "string"; isReadonly: true }
        Property { name: "mi_cast"; type: "string"; isReadonly: true }
        Property { name: "mi_cast_connected"; type: "string"; isReadonly: true }
        Property { name: "mi_center_focus_strong"; type: "string"; isReadonly: true }
        Property { name: "mi_center_focus_weak"; type: "string"; isReadonly: true }
        Property { name: "mi_change_history"; type: "string"; isReadonly: true }
        Property { name: "mi_chat"; type: "string"; isReadonly: true }
        Property { name: "mi_chat_bubble"; type: "string"; isReadonly: true }
        Property { name: "mi_chat_bubble_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_check"; type: "string"; isReadonly: true }
        Property { name: "mi_check_box"; type: "string"; isReadonly: true }
        Property { name: "mi_check_box_outline_blank"; type: "string"; isReadonly: true }
        Property { name: "mi_check_circle"; type: "string"; isReadonly: true }
        Property { name: "mi_chevron_left"; type: "string"; isReadonly: true }
        Property { name: "mi_chevron_right"; type: "string"; isReadonly: true }
        Property { name: "mi_child_care"; type: "string"; isReadonly: true }
        Property { name: "mi_child_friendly"; type: "string"; isReadonly: true }
        Property { name: "mi_chrome_reader_mode"; type: "string"; isReadonly: true }
        Property { name: "mi_class"; type: "string"; isReadonly: true }
        Property { name: "mi_clear"; type: "string"; isReadonly: true }
        Property { name: "mi_clear_all"; type: "string"; isReadonly: true }
        Property { name: "mi_close"; type: "string"; isReadonly: true }
        Property { name: "mi_closed_caption"; type: "string"; isReadonly: true }
        Property { name: "mi_cloud"; type: "string"; isReadonly: true }
        Property { name: "mi_cloud_circle"; type: "string"; isReadonly: true }
        Property { name: "mi_cloud_done"; type: "string"; isReadonly: true }
        Property { name: "mi_cloud_download"; type: "string"; isReadonly: true }
        Property { name: "mi_cloud_off"; type: "string"; isReadonly: true }
        Property { name: "mi_cloud_queue"; type: "string"; isReadonly: true }
        Property { name: "mi_cloud_upload"; type: "string"; isReadonly: true }
        Property { name: "mi_code"; type: "string"; isReadonly: true }
        Property { name: "mi_collections"; type: "string"; isReadonly: true }
        Property { name: "mi_collections_bookmark"; type: "string"; isReadonly: true }
        Property { name: "mi_color_lens"; type: "string"; isReadonly: true }
        Property { name: "mi_colorize"; type: "string"; isReadonly: true }
        Property { name: "mi_comment"; type: "string"; isReadonly: true }
        Property { name: "mi_compare"; type: "string"; isReadonly: true }
        Property { name: "mi_compare_arrows"; type: "string"; isReadonly: true }
        Property { name: "mi_computer"; type: "string"; isReadonly: true }
        Property { name: "mi_confirmation_number"; type: "string"; isReadonly: true }
        Property { name: "mi_contact_mail"; type: "string"; isReadonly: true }
        Property { name: "mi_contact_phone"; type: "string"; isReadonly: true }
        Property { name: "mi_contacts"; type: "string"; isReadonly: true }
        Property { name: "mi_content_copy"; type: "string"; isReadonly: true }
        Property { name: "mi_content_cut"; type: "string"; isReadonly: true }
        Property { name: "mi_content_paste"; type: "string"; isReadonly: true }
        Property { name: "mi_control_point"; type: "string"; isReadonly: true }
        Property { name: "mi_control_point_duplicate"; type: "string"; isReadonly: true }
        Property { name: "mi_copyright"; type: "string"; isReadonly: true }
        Property { name: "mi_create"; type: "string"; isReadonly: true }
        Property { name: "mi_create_new_folder"; type: "string"; isReadonly: true }
        Property { name: "mi_credit_card"; type: "string"; isReadonly: true }
        Property { name: "mi_crop"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_16_9"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_3_2"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_5_4"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_7_5"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_din"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_free"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_landscape"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_original"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_portrait"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_rotate"; type: "string"; isReadonly: true }
        Property { name: "mi_crop_square"; type: "string"; isReadonly: true }
        Property { name: "mi_dashboard"; type: "string"; isReadonly: true }
        Property { name: "mi_data_usage"; type: "string"; isReadonly: true }
        Property { name: "mi_date_range"; type: "string"; isReadonly: true }
        Property { name: "mi_dehaze"; type: "string"; isReadonly: true }
        Property { name: "mi_delete"; type: "string"; isReadonly: true }
        Property { name: "mi_delete_forever"; type: "string"; isReadonly: true }
        Property { name: "mi_delete_sweep"; type: "string"; isReadonly: true }
        Property { name: "mi_description"; type: "string"; isReadonly: true }
        Property { name: "mi_desktop_mac"; type: "string"; isReadonly: true }
        Property { name: "mi_desktop_windows"; type: "string"; isReadonly: true }
        Property { name: "mi_details"; type: "string"; isReadonly: true }
        Property { name: "mi_developer_board"; type: "string"; isReadonly: true }
        Property { name: "mi_developer_mode"; type: "string"; isReadonly: true }
        Property { name: "mi_device_hub"; type: "string"; isReadonly: true }
        Property { name: "mi_devices"; type: "string"; isReadonly: true }
        Property { name: "mi_devices_other"; type: "string"; isReadonly: true }
        Property { name: "mi_dialer_sip"; type: "string"; isReadonly: true }
        Property { name: "mi_dialpad"; type: "string"; isReadonly: true }
        Property { name: "mi_directions"; type: "string"; isReadonly: true }
        Property { name: "mi_directions_bike"; type: "string"; isReadonly: true }
        Property { name: "mi_directions_boat"; type: "string"; isReadonly: true }
        Property { name: "mi_directions_bus"; type: "string"; isReadonly: true }
        Property { name: "mi_directions_car"; type: "string"; isReadonly: true }
        Property { name: "mi_directions_railway"; type: "string"; isReadonly: true }
        Property { name: "mi_directions_run"; type: "string"; isReadonly: true }
        Property { name: "mi_directions_subway"; type: "string"; isReadonly: true }
        Property { name: "mi_directions_transit"; type: "string"; isReadonly: true }
        Property { name: "mi_directions_walk"; type: "string"; isReadonly: true }
        Property { name: "mi_disc_full"; type: "string"; isReadonly: true }
        Property { name: "mi_dns"; type: "string"; isReadonly: true }
        Property { name: "mi_do_not_disturb"; type: "string"; isReadonly: true }
        Property { name: "mi_do_not_disturb_alt"; type: "string"; isReadonly: true }
        Property { name: "mi_do_not_disturb_off"; type: "string"; isReadonly: true }
        Property { name: "mi_do_not_disturb_on"; type: "string"; isReadonly: true }
        Property { name: "mi_dock"; type: "string"; isReadonly: true }
        Property { name: "mi_domain"; type: "string"; isReadonly: true }
        Property { name: "mi_done"; type: "string"; isReadonly: true }
        Property { name: "mi_done_all"; type: "string"; isReadonly: true }
        Property { name: "mi_donut_large"; type: "string"; isReadonly: true }
        Property { name: "mi_donut_small"; type: "string"; isReadonly: true }
        Property { name: "mi_drafts"; type: "string"; isReadonly: true }
        Property { name: "mi_drag_handle"; type: "string"; isReadonly: true }
        Property { name: "mi_drive_eta"; type: "string"; isReadonly: true }
        Property { name: "mi_dvr"; type: "string"; isReadonly: true }
        Property { name: "mi_edit"; type: "string"; isReadonly: true }
        Property { name: "mi_edit_location"; type: "string"; isReadonly: true }
        Property { name: "mi_eject"; type: "string"; isReadonly: true }
        Property { name: "mi_email"; type: "string"; isReadonly: true }
        Property { name: "mi_enhanced_encryption"; type: "string"; isReadonly: true }
        Property { name: "mi_equalizer"; type: "string"; isReadonly: true }
        Property { name: "mi_error"; type: "string"; isReadonly: true }
        Property { name: "mi_error_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_euro_symbol"; type: "string"; isReadonly: true }
        Property { name: "mi_ev_station"; type: "string"; isReadonly: true }
        Property { name: "mi_event"; type: "string"; isReadonly: true }
        Property { name: "mi_event_available"; type: "string"; isReadonly: true }
        Property { name: "mi_event_busy"; type: "string"; isReadonly: true }
        Property { name: "mi_event_note"; type: "string"; isReadonly: true }
        Property { name: "mi_event_seat"; type: "string"; isReadonly: true }
        Property { name: "mi_exit_to_app"; type: "string"; isReadonly: true }
        Property { name: "mi_expand_less"; type: "string"; isReadonly: true }
        Property { name: "mi_expand_more"; type: "string"; isReadonly: true }
        Property { name: "mi_explicit"; type: "string"; isReadonly: true }
        Property { name: "mi_explore"; type: "string"; isReadonly: true }
        Property { name: "mi_exposure"; type: "string"; isReadonly: true }
        Property { name: "mi_exposure_neg_1"; type: "string"; isReadonly: true }
        Property { name: "mi_exposure_neg_2"; type: "string"; isReadonly: true }
        Property { name: "mi_exposure_plus_1"; type: "string"; isReadonly: true }
        Property { name: "mi_exposure_plus_2"; type: "string"; isReadonly: true }
        Property { name: "mi_exposure_zero"; type: "string"; isReadonly: true }
        Property { name: "mi_extension"; type: "string"; isReadonly: true }
        Property { name: "mi_face"; type: "string"; isReadonly: true }
        Property { name: "mi_fast_forward"; type: "string"; isReadonly: true }
        Property { name: "mi_fast_rewind"; type: "string"; isReadonly: true }
        Property { name: "mi_favorite"; type: "string"; isReadonly: true }
        Property { name: "mi_favorite_border"; type: "string"; isReadonly: true }
        Property { name: "mi_featured_play_list"; type: "string"; isReadonly: true }
        Property { name: "mi_featured_video"; type: "string"; isReadonly: true }
        Property { name: "mi_feedback"; type: "string"; isReadonly: true }
        Property { name: "mi_fiber_dvr"; type: "string"; isReadonly: true }
        Property { name: "mi_fiber_manual_record"; type: "string"; isReadonly: true }
        Property { name: "mi_fiber_new"; type: "string"; isReadonly: true }
        Property { name: "mi_fiber_pin"; type: "string"; isReadonly: true }
        Property { name: "mi_fiber_smart_record"; type: "string"; isReadonly: true }
        Property { name: "mi_file_download"; type: "string"; isReadonly: true }
        Property { name: "mi_file_upload"; type: "string"; isReadonly: true }
        Property { name: "mi_filter"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_1"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_2"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_3"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_4"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_5"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_6"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_7"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_8"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_9"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_9_plus"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_b_and_w"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_center_focus"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_drama"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_frames"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_hdr"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_list"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_none"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_tilt_shift"; type: "string"; isReadonly: true }
        Property { name: "mi_filter_vintage"; type: "string"; isReadonly: true }
        Property { name: "mi_find_in_page"; type: "string"; isReadonly: true }
        Property { name: "mi_find_replace"; type: "string"; isReadonly: true }
        Property { name: "mi_fingerprint"; type: "string"; isReadonly: true }
        Property { name: "mi_first_page"; type: "string"; isReadonly: true }
        Property { name: "mi_fitness_center"; type: "string"; isReadonly: true }
        Property { name: "mi_flag"; type: "string"; isReadonly: true }
        Property { name: "mi_flare"; type: "string"; isReadonly: true }
        Property { name: "mi_flash_auto"; type: "string"; isReadonly: true }
        Property { name: "mi_flash_off"; type: "string"; isReadonly: true }
        Property { name: "mi_flash_on"; type: "string"; isReadonly: true }
        Property { name: "mi_flight"; type: "string"; isReadonly: true }
        Property { name: "mi_flight_land"; type: "string"; isReadonly: true }
        Property { name: "mi_flight_takeoff"; type: "string"; isReadonly: true }
        Property { name: "mi_flip"; type: "string"; isReadonly: true }
        Property { name: "mi_flip_to_back"; type: "string"; isReadonly: true }
        Property { name: "mi_flip_to_front"; type: "string"; isReadonly: true }
        Property { name: "mi_folder"; type: "string"; isReadonly: true }
        Property { name: "mi_folder_open"; type: "string"; isReadonly: true }
        Property { name: "mi_folder_shared"; type: "string"; isReadonly: true }
        Property { name: "mi_folder_special"; type: "string"; isReadonly: true }
        Property { name: "mi_font_download"; type: "string"; isReadonly: true }
        Property { name: "mi_format_align_center"; type: "string"; isReadonly: true }
        Property { name: "mi_format_align_justify"; type: "string"; isReadonly: true }
        Property { name: "mi_format_align_left"; type: "string"; isReadonly: true }
        Property { name: "mi_format_align_right"; type: "string"; isReadonly: true }
        Property { name: "mi_format_bold"; type: "string"; isReadonly: true }
        Property { name: "mi_format_clear"; type: "string"; isReadonly: true }
        Property { name: "mi_format_color_fill"; type: "string"; isReadonly: true }
        Property { name: "mi_format_color_reset"; type: "string"; isReadonly: true }
        Property { name: "mi_format_color_text"; type: "string"; isReadonly: true }
        Property { name: "mi_format_indent_decrease"; type: "string"; isReadonly: true }
        Property { name: "mi_format_indent_increase"; type: "string"; isReadonly: true }
        Property { name: "mi_format_italic"; type: "string"; isReadonly: true }
        Property { name: "mi_format_line_spacing"; type: "string"; isReadonly: true }
        Property { name: "mi_format_list_bulleted"; type: "string"; isReadonly: true }
        Property { name: "mi_format_list_numbered"; type: "string"; isReadonly: true }
        Property { name: "mi_format_paint"; type: "string"; isReadonly: true }
        Property { name: "mi_format_quote"; type: "string"; isReadonly: true }
        Property { name: "mi_format_shapes"; type: "string"; isReadonly: true }
        Property { name: "mi_format_size"; type: "string"; isReadonly: true }
        Property { name: "mi_format_strikethrough"; type: "string"; isReadonly: true }
        Property { name: "mi_format_textdirection_l_to_r"; type: "string"; isReadonly: true }
        Property { name: "mi_format_textdirection_r_to_l"; type: "string"; isReadonly: true }
        Property { name: "mi_format_underlined"; type: "string"; isReadonly: true }
        Property { name: "mi_forum"; type: "string"; isReadonly: true }
        Property { name: "mi_forward"; type: "string"; isReadonly: true }
        Property { name: "mi_forward_10"; type: "string"; isReadonly: true }
        Property { name: "mi_forward_30"; type: "string"; isReadonly: true }
        Property { name: "mi_forward_5"; type: "string"; isReadonly: true }
        Property { name: "mi_free_breakfast"; type: "string"; isReadonly: true }
        Property { name: "mi_fullscreen"; type: "string"; isReadonly: true }
        Property { name: "mi_fullscreen_exit"; type: "string"; isReadonly: true }
        Property { name: "mi_functions"; type: "string"; isReadonly: true }
        Property { name: "mi_g_translate"; type: "string"; isReadonly: true }
        Property { name: "mi_gamepad"; type: "string"; isReadonly: true }
        Property { name: "mi_games"; type: "string"; isReadonly: true }
        Property { name: "mi_gavel"; type: "string"; isReadonly: true }
        Property { name: "mi_gesture"; type: "string"; isReadonly: true }
        Property { name: "mi_get_app"; type: "string"; isReadonly: true }
        Property { name: "mi_gif"; type: "string"; isReadonly: true }
        Property { name: "mi_golf_course"; type: "string"; isReadonly: true }
        Property { name: "mi_gps_fixed"; type: "string"; isReadonly: true }
        Property { name: "mi_gps_not_fixed"; type: "string"; isReadonly: true }
        Property { name: "mi_gps_off"; type: "string"; isReadonly: true }
        Property { name: "mi_grade"; type: "string"; isReadonly: true }
        Property { name: "mi_gradient"; type: "string"; isReadonly: true }
        Property { name: "mi_grain"; type: "string"; isReadonly: true }
        Property { name: "mi_graphic_eq"; type: "string"; isReadonly: true }
        Property { name: "mi_grid_off"; type: "string"; isReadonly: true }
        Property { name: "mi_grid_on"; type: "string"; isReadonly: true }
        Property { name: "mi_group"; type: "string"; isReadonly: true }
        Property { name: "mi_group_add"; type: "string"; isReadonly: true }
        Property { name: "mi_group_work"; type: "string"; isReadonly: true }
        Property { name: "mi_hd"; type: "string"; isReadonly: true }
        Property { name: "mi_hdr_off"; type: "string"; isReadonly: true }
        Property { name: "mi_hdr_on"; type: "string"; isReadonly: true }
        Property { name: "mi_hdr_strong"; type: "string"; isReadonly: true }
        Property { name: "mi_hdr_weak"; type: "string"; isReadonly: true }
        Property { name: "mi_headset"; type: "string"; isReadonly: true }
        Property { name: "mi_headset_mic"; type: "string"; isReadonly: true }
        Property { name: "mi_healing"; type: "string"; isReadonly: true }
        Property { name: "mi_hearing"; type: "string"; isReadonly: true }
        Property { name: "mi_help"; type: "string"; isReadonly: true }
        Property { name: "mi_help_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_high_quality"; type: "string"; isReadonly: true }
        Property { name: "mi_highlight"; type: "string"; isReadonly: true }
        Property { name: "mi_highlight_off"; type: "string"; isReadonly: true }
        Property { name: "mi_history"; type: "string"; isReadonly: true }
        Property { name: "mi_home"; type: "string"; isReadonly: true }
        Property { name: "mi_hot_tub"; type: "string"; isReadonly: true }
        Property { name: "mi_hotel"; type: "string"; isReadonly: true }
        Property { name: "mi_hourglass_empty"; type: "string"; isReadonly: true }
        Property { name: "mi_hourglass_full"; type: "string"; isReadonly: true }
        Property { name: "mi_http"; type: "string"; isReadonly: true }
        Property { name: "mi_https"; type: "string"; isReadonly: true }
        Property { name: "mi_image"; type: "string"; isReadonly: true }
        Property { name: "mi_image_aspect_ratio"; type: "string"; isReadonly: true }
        Property { name: "mi_import_contacts"; type: "string"; isReadonly: true }
        Property { name: "mi_import_export"; type: "string"; isReadonly: true }
        Property { name: "mi_important_devices"; type: "string"; isReadonly: true }
        Property { name: "mi_inbox"; type: "string"; isReadonly: true }
        Property { name: "mi_indeterminate_check_box"; type: "string"; isReadonly: true }
        Property { name: "mi_info"; type: "string"; isReadonly: true }
        Property { name: "mi_info_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_input"; type: "string"; isReadonly: true }
        Property { name: "mi_insert_chart"; type: "string"; isReadonly: true }
        Property { name: "mi_insert_comment"; type: "string"; isReadonly: true }
        Property { name: "mi_insert_drive_file"; type: "string"; isReadonly: true }
        Property { name: "mi_insert_emoticon"; type: "string"; isReadonly: true }
        Property { name: "mi_insert_invitation"; type: "string"; isReadonly: true }
        Property { name: "mi_insert_link"; type: "string"; isReadonly: true }
        Property { name: "mi_insert_photo"; type: "string"; isReadonly: true }
        Property { name: "mi_invert_colors"; type: "string"; isReadonly: true }
        Property { name: "mi_invert_colors_off"; type: "string"; isReadonly: true }
        Property { name: "mi_iso"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard_arrow_down"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard_arrow_left"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard_arrow_right"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard_arrow_up"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard_backspace"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard_capslock"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard_hide"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard_return"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard_tab"; type: "string"; isReadonly: true }
        Property { name: "mi_keyboard_voice"; type: "string"; isReadonly: true }
        Property { name: "mi_kitchen"; type: "string"; isReadonly: true }
        Property { name: "mi_label"; type: "string"; isReadonly: true }
        Property { name: "mi_label_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_landscape"; type: "string"; isReadonly: true }
        Property { name: "mi_language"; type: "string"; isReadonly: true }
        Property { name: "mi_laptop"; type: "string"; isReadonly: true }
        Property { name: "mi_laptop_chromebook"; type: "string"; isReadonly: true }
        Property { name: "mi_laptop_mac"; type: "string"; isReadonly: true }
        Property { name: "mi_laptop_windows"; type: "string"; isReadonly: true }
        Property { name: "mi_last_page"; type: "string"; isReadonly: true }
        Property { name: "mi_launch"; type: "string"; isReadonly: true }
        Property { name: "mi_layers"; type: "string"; isReadonly: true }
        Property { name: "mi_layers_clear"; type: "string"; isReadonly: true }
        Property { name: "mi_leak_add"; type: "string"; isReadonly: true }
        Property { name: "mi_leak_remove"; type: "string"; isReadonly: true }
        Property { name: "mi_lens"; type: "string"; isReadonly: true }
        Property { name: "mi_library_add"; type: "string"; isReadonly: true }
        Property { name: "mi_library_books"; type: "string"; isReadonly: true }
        Property { name: "mi_library_music"; type: "string"; isReadonly: true }
        Property { name: "mi_lightbulb_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_line_style"; type: "string"; isReadonly: true }
        Property { name: "mi_line_weight"; type: "string"; isReadonly: true }
        Property { name: "mi_linear_scale"; type: "string"; isReadonly: true }
        Property { name: "mi_link"; type: "string"; isReadonly: true }
        Property { name: "mi_linked_camera"; type: "string"; isReadonly: true }
        Property { name: "mi_list"; type: "string"; isReadonly: true }
        Property { name: "mi_live_help"; type: "string"; isReadonly: true }
        Property { name: "mi_live_tv"; type: "string"; isReadonly: true }
        Property { name: "mi_local_activity"; type: "string"; isReadonly: true }
        Property { name: "mi_local_airport"; type: "string"; isReadonly: true }
        Property { name: "mi_local_atm"; type: "string"; isReadonly: true }
        Property { name: "mi_local_bar"; type: "string"; isReadonly: true }
        Property { name: "mi_local_cafe"; type: "string"; isReadonly: true }
        Property { name: "mi_local_car_wash"; type: "string"; isReadonly: true }
        Property { name: "mi_local_convenience_store"; type: "string"; isReadonly: true }
        Property { name: "mi_local_dining"; type: "string"; isReadonly: true }
        Property { name: "mi_local_drink"; type: "string"; isReadonly: true }
        Property { name: "mi_local_florist"; type: "string"; isReadonly: true }
        Property { name: "mi_local_gas_station"; type: "string"; isReadonly: true }
        Property { name: "mi_local_grocery_store"; type: "string"; isReadonly: true }
        Property { name: "mi_local_hospital"; type: "string"; isReadonly: true }
        Property { name: "mi_local_hotel"; type: "string"; isReadonly: true }
        Property { name: "mi_local_laundry_service"; type: "string"; isReadonly: true }
        Property { name: "mi_local_library"; type: "string"; isReadonly: true }
        Property { name: "mi_local_mall"; type: "string"; isReadonly: true }
        Property { name: "mi_local_movies"; type: "string"; isReadonly: true }
        Property { name: "mi_local_offer"; type: "string"; isReadonly: true }
        Property { name: "mi_local_parking"; type: "string"; isReadonly: true }
        Property { name: "mi_local_pharmacy"; type: "string"; isReadonly: true }
        Property { name: "mi_local_phone"; type: "string"; isReadonly: true }
        Property { name: "mi_local_pizza"; type: "string"; isReadonly: true }
        Property { name: "mi_local_play"; type: "string"; isReadonly: true }
        Property { name: "mi_local_post_office"; type: "string"; isReadonly: true }
        Property { name: "mi_local_printshop"; type: "string"; isReadonly: true }
        Property { name: "mi_local_see"; type: "string"; isReadonly: true }
        Property { name: "mi_local_shipping"; type: "string"; isReadonly: true }
        Property { name: "mi_local_taxi"; type: "string"; isReadonly: true }
        Property { name: "mi_location_city"; type: "string"; isReadonly: true }
        Property { name: "mi_location_disabled"; type: "string"; isReadonly: true }
        Property { name: "mi_location_off"; type: "string"; isReadonly: true }
        Property { name: "mi_location_on"; type: "string"; isReadonly: true }
        Property { name: "mi_location_searching"; type: "string"; isReadonly: true }
        Property { name: "mi_lock"; type: "string"; isReadonly: true }
        Property { name: "mi_lock_open"; type: "string"; isReadonly: true }
        Property { name: "mi_lock_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_looks"; type: "string"; isReadonly: true }
        Property { name: "mi_looks_3"; type: "string"; isReadonly: true }
        Property { name: "mi_looks_4"; type: "string"; isReadonly: true }
        Property { name: "mi_looks_5"; type: "string"; isReadonly: true }
        Property { name: "mi_looks_6"; type: "string"; isReadonly: true }
        Property { name: "mi_looks_one"; type: "string"; isReadonly: true }
        Property { name: "mi_looks_two"; type: "string"; isReadonly: true }
        Property { name: "mi_loop"; type: "string"; isReadonly: true }
        Property { name: "mi_loupe"; type: "string"; isReadonly: true }
        Property { name: "mi_low_priority"; type: "string"; isReadonly: true }
        Property { name: "mi_loyalty"; type: "string"; isReadonly: true }
        Property { name: "mi_mail"; type: "string"; isReadonly: true }
        Property { name: "mi_mail_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_map"; type: "string"; isReadonly: true }
        Property { name: "mi_markunread"; type: "string"; isReadonly: true }
        Property { name: "mi_markunread_mailbox"; type: "string"; isReadonly: true }
        Property { name: "mi_memory"; type: "string"; isReadonly: true }
        Property { name: "mi_menu"; type: "string"; isReadonly: true }
        Property { name: "mi_merge_type"; type: "string"; isReadonly: true }
        Property { name: "mi_message"; type: "string"; isReadonly: true }
        Property { name: "mi_mic"; type: "string"; isReadonly: true }
        Property { name: "mi_mic_none"; type: "string"; isReadonly: true }
        Property { name: "mi_mic_off"; type: "string"; isReadonly: true }
        Property { name: "mi_mms"; type: "string"; isReadonly: true }
        Property { name: "mi_mode_comment"; type: "string"; isReadonly: true }
        Property { name: "mi_mode_edit"; type: "string"; isReadonly: true }
        Property { name: "mi_monetization_on"; type: "string"; isReadonly: true }
        Property { name: "mi_money_off"; type: "string"; isReadonly: true }
        Property { name: "mi_monochrome_photos"; type: "string"; isReadonly: true }
        Property { name: "mi_mood"; type: "string"; isReadonly: true }
        Property { name: "mi_mood_bad"; type: "string"; isReadonly: true }
        Property { name: "mi_more"; type: "string"; isReadonly: true }
        Property { name: "mi_more_horiz"; type: "string"; isReadonly: true }
        Property { name: "mi_more_vert"; type: "string"; isReadonly: true }
        Property { name: "mi_motorcycle"; type: "string"; isReadonly: true }
        Property { name: "mi_mouse"; type: "string"; isReadonly: true }
        Property { name: "mi_move_to_inbox"; type: "string"; isReadonly: true }
        Property { name: "mi_movie"; type: "string"; isReadonly: true }
        Property { name: "mi_movie_creation"; type: "string"; isReadonly: true }
        Property { name: "mi_movie_filter"; type: "string"; isReadonly: true }
        Property { name: "mi_multiline_chart"; type: "string"; isReadonly: true }
        Property { name: "mi_music_note"; type: "string"; isReadonly: true }
        Property { name: "mi_music_video"; type: "string"; isReadonly: true }
        Property { name: "mi_my_location"; type: "string"; isReadonly: true }
        Property { name: "mi_nature"; type: "string"; isReadonly: true }
        Property { name: "mi_nature_people"; type: "string"; isReadonly: true }
        Property { name: "mi_navigate_before"; type: "string"; isReadonly: true }
        Property { name: "mi_navigate_next"; type: "string"; isReadonly: true }
        Property { name: "mi_navigation"; type: "string"; isReadonly: true }
        Property { name: "mi_near_me"; type: "string"; isReadonly: true }
        Property { name: "mi_network_cell"; type: "string"; isReadonly: true }
        Property { name: "mi_network_check"; type: "string"; isReadonly: true }
        Property { name: "mi_network_locked"; type: "string"; isReadonly: true }
        Property { name: "mi_network_wifi"; type: "string"; isReadonly: true }
        Property { name: "mi_new_releases"; type: "string"; isReadonly: true }
        Property { name: "mi_next_week"; type: "string"; isReadonly: true }
        Property { name: "mi_nfc"; type: "string"; isReadonly: true }
        Property { name: "mi_no_encryption"; type: "string"; isReadonly: true }
        Property { name: "mi_no_sim"; type: "string"; isReadonly: true }
        Property { name: "mi_not_interested"; type: "string"; isReadonly: true }
        Property { name: "mi_note"; type: "string"; isReadonly: true }
        Property { name: "mi_note_add"; type: "string"; isReadonly: true }
        Property { name: "mi_notifications"; type: "string"; isReadonly: true }
        Property { name: "mi_notifications_active"; type: "string"; isReadonly: true }
        Property { name: "mi_notifications_none"; type: "string"; isReadonly: true }
        Property { name: "mi_notifications_off"; type: "string"; isReadonly: true }
        Property { name: "mi_notifications_paused"; type: "string"; isReadonly: true }
        Property { name: "mi_offline_pin"; type: "string"; isReadonly: true }
        Property { name: "mi_ondemand_video"; type: "string"; isReadonly: true }
        Property { name: "mi_opacity"; type: "string"; isReadonly: true }
        Property { name: "mi_open_in_browser"; type: "string"; isReadonly: true }
        Property { name: "mi_open_in_new"; type: "string"; isReadonly: true }
        Property { name: "mi_open_with"; type: "string"; isReadonly: true }
        Property { name: "mi_pages"; type: "string"; isReadonly: true }
        Property { name: "mi_pageview"; type: "string"; isReadonly: true }
        Property { name: "mi_palette"; type: "string"; isReadonly: true }
        Property { name: "mi_pan_tool"; type: "string"; isReadonly: true }
        Property { name: "mi_panorama"; type: "string"; isReadonly: true }
        Property { name: "mi_panorama_fish_eye"; type: "string"; isReadonly: true }
        Property { name: "mi_panorama_horizontal"; type: "string"; isReadonly: true }
        Property { name: "mi_panorama_vertical"; type: "string"; isReadonly: true }
        Property { name: "mi_panorama_wide_angle"; type: "string"; isReadonly: true }
        Property { name: "mi_party_mode"; type: "string"; isReadonly: true }
        Property { name: "mi_pause"; type: "string"; isReadonly: true }
        Property { name: "mi_pause_circle_filled"; type: "string"; isReadonly: true }
        Property { name: "mi_pause_circle_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_payment"; type: "string"; isReadonly: true }
        Property { name: "mi_people"; type: "string"; isReadonly: true }
        Property { name: "mi_people_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_perm_camera_mic"; type: "string"; isReadonly: true }
        Property { name: "mi_perm_contact_calendar"; type: "string"; isReadonly: true }
        Property { name: "mi_perm_data_setting"; type: "string"; isReadonly: true }
        Property { name: "mi_perm_device_information"; type: "string"; isReadonly: true }
        Property { name: "mi_perm_identity"; type: "string"; isReadonly: true }
        Property { name: "mi_perm_media"; type: "string"; isReadonly: true }
        Property { name: "mi_perm_phone_msg"; type: "string"; isReadonly: true }
        Property { name: "mi_perm_scan_wifi"; type: "string"; isReadonly: true }
        Property { name: "mi_person"; type: "string"; isReadonly: true }
        Property { name: "mi_person_add"; type: "string"; isReadonly: true }
        Property { name: "mi_person_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_person_pin"; type: "string"; isReadonly: true }
        Property { name: "mi_person_pin_circle"; type: "string"; isReadonly: true }
        Property { name: "mi_personal_video"; type: "string"; isReadonly: true }
        Property { name: "mi_pets"; type: "string"; isReadonly: true }
        Property { name: "mi_phone"; type: "string"; isReadonly: true }
        Property { name: "mi_phone_android"; type: "string"; isReadonly: true }
        Property { name: "mi_phone_bluetooth_speaker"; type: "string"; isReadonly: true }
        Property { name: "mi_phone_forwarded"; type: "string"; isReadonly: true }
        Property { name: "mi_phone_in_talk"; type: "string"; isReadonly: true }
        Property { name: "mi_phone_iphone"; type: "string"; isReadonly: true }
        Property { name: "mi_phone_locked"; type: "string"; isReadonly: true }
        Property { name: "mi_phone_missed"; type: "string"; isReadonly: true }
        Property { name: "mi_phone_paused"; type: "string"; isReadonly: true }
        Property { name: "mi_phonelink"; type: "string"; isReadonly: true }
        Property { name: "mi_phonelink_erase"; type: "string"; isReadonly: true }
        Property { name: "mi_phonelink_lock"; type: "string"; isReadonly: true }
        Property { name: "mi_phonelink_off"; type: "string"; isReadonly: true }
        Property { name: "mi_phonelink_ring"; type: "string"; isReadonly: true }
        Property { name: "mi_phonelink_setup"; type: "string"; isReadonly: true }
        Property { name: "mi_photo"; type: "string"; isReadonly: true }
        Property { name: "mi_photo_album"; type: "string"; isReadonly: true }
        Property { name: "mi_photo_camera"; type: "string"; isReadonly: true }
        Property { name: "mi_photo_filter"; type: "string"; isReadonly: true }
        Property { name: "mi_photo_library"; type: "string"; isReadonly: true }
        Property { name: "mi_photo_size_select_actual"; type: "string"; isReadonly: true }
        Property { name: "mi_photo_size_select_large"; type: "string"; isReadonly: true }
        Property { name: "mi_photo_size_select_small"; type: "string"; isReadonly: true }
        Property { name: "mi_picture_as_pdf"; type: "string"; isReadonly: true }
        Property { name: "mi_picture_in_picture"; type: "string"; isReadonly: true }
        Property { name: "mi_picture_in_picture_alt"; type: "string"; isReadonly: true }
        Property { name: "mi_pie_chart"; type: "string"; isReadonly: true }
        Property { name: "mi_pie_chart_outlined"; type: "string"; isReadonly: true }
        Property { name: "mi_pin_drop"; type: "string"; isReadonly: true }
        Property { name: "mi_place"; type: "string"; isReadonly: true }
        Property { name: "mi_play_arrow"; type: "string"; isReadonly: true }
        Property { name: "mi_play_circle_filled"; type: "string"; isReadonly: true }
        Property { name: "mi_play_circle_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_play_for_work"; type: "string"; isReadonly: true }
        Property { name: "mi_playlist_add"; type: "string"; isReadonly: true }
        Property { name: "mi_playlist_add_check"; type: "string"; isReadonly: true }
        Property { name: "mi_playlist_play"; type: "string"; isReadonly: true }
        Property { name: "mi_plus_one"; type: "string"; isReadonly: true }
        Property { name: "mi_poll"; type: "string"; isReadonly: true }
        Property { name: "mi_polymer"; type: "string"; isReadonly: true }
        Property { name: "mi_pool"; type: "string"; isReadonly: true }
        Property { name: "mi_portable_wifi_off"; type: "string"; isReadonly: true }
        Property { name: "mi_portrait"; type: "string"; isReadonly: true }
        Property { name: "mi_power"; type: "string"; isReadonly: true }
        Property { name: "mi_power_input"; type: "string"; isReadonly: true }
        Property { name: "mi_power_settings_new"; type: "string"; isReadonly: true }
        Property { name: "mi_pregnant_woman"; type: "string"; isReadonly: true }
        Property { name: "mi_present_to_all"; type: "string"; isReadonly: true }
        Property { name: "mi_print"; type: "string"; isReadonly: true }
        Property { name: "mi_priority_high"; type: "string"; isReadonly: true }
        Property { name: "mi_public"; type: "string"; isReadonly: true }
        Property { name: "mi_publish"; type: "string"; isReadonly: true }
        Property { name: "mi_query_builder"; type: "string"; isReadonly: true }
        Property { name: "mi_question_answer"; type: "string"; isReadonly: true }
        Property { name: "mi_queue"; type: "string"; isReadonly: true }
        Property { name: "mi_queue_music"; type: "string"; isReadonly: true }
        Property { name: "mi_queue_play_next"; type: "string"; isReadonly: true }
        Property { name: "mi_radio"; type: "string"; isReadonly: true }
        Property { name: "mi_radio_button_checked"; type: "string"; isReadonly: true }
        Property { name: "mi_radio_button_unchecked"; type: "string"; isReadonly: true }
        Property { name: "mi_rate_review"; type: "string"; isReadonly: true }
        Property { name: "mi_receipt"; type: "string"; isReadonly: true }
        Property { name: "mi_recent_actors"; type: "string"; isReadonly: true }
        Property { name: "mi_record_voice_over"; type: "string"; isReadonly: true }
        Property { name: "mi_redeem"; type: "string"; isReadonly: true }
        Property { name: "mi_redo"; type: "string"; isReadonly: true }
        Property { name: "mi_refresh"; type: "string"; isReadonly: true }
        Property { name: "mi_remove"; type: "string"; isReadonly: true }
        Property { name: "mi_remove_circle"; type: "string"; isReadonly: true }
        Property { name: "mi_remove_circle_outline"; type: "string"; isReadonly: true }
        Property { name: "mi_remove_from_queue"; type: "string"; isReadonly: true }
        Property { name: "mi_remove_red_eye"; type: "string"; isReadonly: true }
        Property { name: "mi_remove_shopping_cart"; type: "string"; isReadonly: true }
        Property { name: "mi_reorder"; type: "string"; isReadonly: true }
        Property { name: "mi_repeat"; type: "string"; isReadonly: true }
        Property { name: "mi_repeat_one"; type: "string"; isReadonly: true }
        Property { name: "mi_replay"; type: "string"; isReadonly: true }
        Property { name: "mi_replay_10"; type: "string"; isReadonly: true }
        Property { name: "mi_replay_30"; type: "string"; isReadonly: true }
        Property { name: "mi_replay_5"; type: "string"; isReadonly: true }
        Property { name: "mi_reply"; type: "string"; isReadonly: true }
        Property { name: "mi_reply_all"; type: "string"; isReadonly: true }
        Property { name: "mi_report"; type: "string"; isReadonly: true }
        Property { name: "mi_report_problem"; type: "string"; isReadonly: true }
        Property { name: "mi_restaurant"; type: "string"; isReadonly: true }
        Property { name: "mi_restaurant_menu"; type: "string"; isReadonly: true }
        Property { name: "mi_restore"; type: "string"; isReadonly: true }
        Property { name: "mi_restore_page"; type: "string"; isReadonly: true }
        Property { name: "mi_ring_volume"; type: "string"; isReadonly: true }
        Property { name: "mi_room"; type: "string"; isReadonly: true }
        Property { name: "mi_room_service"; type: "string"; isReadonly: true }
        Property { name: "mi_rotate_90_degrees_ccw"; type: "string"; isReadonly: true }
        Property { name: "mi_rotate_left"; type: "string"; isReadonly: true }
        Property { name: "mi_rotate_right"; type: "string"; isReadonly: true }
        Property { name: "mi_rounded_corner"; type: "string"; isReadonly: true }
        Property { name: "mi_router"; type: "string"; isReadonly: true }
        Property { name: "mi_rowing"; type: "string"; isReadonly: true }
        Property { name: "mi_rss_feed"; type: "string"; isReadonly: true }
        Property { name: "mi_rv_hookup"; type: "string"; isReadonly: true }
        Property { name: "mi_satellite"; type: "string"; isReadonly: true }
        Property { name: "mi_save"; type: "string"; isReadonly: true }
        Property { name: "mi_scanner"; type: "string"; isReadonly: true }
        Property { name: "mi_schedule"; type: "string"; isReadonly: true }
        Property { name: "mi_school"; type: "string"; isReadonly: true }
        Property { name: "mi_screen_lock_landscape"; type: "string"; isReadonly: true }
        Property { name: "mi_screen_lock_portrait"; type: "string"; isReadonly: true }
        Property { name: "mi_screen_lock_rotation"; type: "string"; isReadonly: true }
        Property { name: "mi_screen_rotation"; type: "string"; isReadonly: true }
        Property { name: "mi_screen_share"; type: "string"; isReadonly: true }
        Property { name: "mi_sd_card"; type: "string"; isReadonly: true }
        Property { name: "mi_sd_storage"; type: "string"; isReadonly: true }
        Property { name: "mi_search"; type: "string"; isReadonly: true }
        Property { name: "mi_security"; type: "string"; isReadonly: true }
        Property { name: "mi_select_all"; type: "string"; isReadonly: true }
        Property { name: "mi_send"; type: "string"; isReadonly: true }
        Property { name: "mi_sentiment_dissatisfied"; type: "string"; isReadonly: true }
        Property { name: "mi_sentiment_neutral"; type: "string"; isReadonly: true }
        Property { name: "mi_sentiment_satisfied"; type: "string"; isReadonly: true }
        Property { name: "mi_sentiment_very_dissatisfied"; type: "string"; isReadonly: true }
        Property { name: "mi_sentiment_very_satisfied"; type: "string"; isReadonly: true }
        Property { name: "mi_settings"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_applications"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_backup_restore"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_bluetooth"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_brightness"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_cell"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_ethernet"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_input_antenna"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_input_component"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_input_composite"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_input_hdmi"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_input_svideo"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_overscan"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_phone"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_power"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_remote"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_system_daydream"; type: "string"; isReadonly: true }
        Property { name: "mi_settings_voice"; type: "string"; isReadonly: true }
        Property { name: "mi_share"; type: "string"; isReadonly: true }
        Property { name: "mi_shop"; type: "string"; isReadonly: true }
        Property { name: "mi_shop_two"; type: "string"; isReadonly: true }
        Property { name: "mi_shopping_basket"; type: "string"; isReadonly: true }
        Property { name: "mi_shopping_cart"; type: "string"; isReadonly: true }
        Property { name: "mi_short_text"; type: "string"; isReadonly: true }
        Property { name: "mi_show_chart"; type: "string"; isReadonly: true }
        Property { name: "mi_shuffle"; type: "string"; isReadonly: true }
        Property { name: "mi_signal_cellular_4_bar"; type: "string"; isReadonly: true }
        Property {
            name: "mi_signal_cellular_connected_no_internet_4_bar"
            type: "string"
            isReadonly: true
        }
        Property { name: "mi_signal_cellular_no_sim"; type: "string"; isReadonly: true }
        Property { name: "mi_signal_cellular_null"; type: "string"; isReadonly: true }
        Property { name: "mi_signal_cellular_off"; type: "string"; isReadonly: true }
        Property { name: "mi_signal_wifi_4_bar"; type: "string"; isReadonly: true }
        Property { name: "mi_signal_wifi_4_bar_lock"; type: "string"; isReadonly: true }
        Property { name: "mi_signal_wifi_off"; type: "string"; isReadonly: true }
        Property { name: "mi_sim_card"; type: "string"; isReadonly: true }
        Property { name: "mi_sim_card_alert"; type: "string"; isReadonly: true }
        Property { name: "mi_skip_next"; type: "string"; isReadonly: true }
        Property { name: "mi_skip_previous"; type: "string"; isReadonly: true }
        Property { name: "mi_slideshow"; type: "string"; isReadonly: true }
        Property { name: "mi_slow_motion_video"; type: "string"; isReadonly: true }
        Property { name: "mi_smartphone"; type: "string"; isReadonly: true }
        Property { name: "mi_smoke_free"; type: "string"; isReadonly: true }
        Property { name: "mi_smoking_rooms"; type: "string"; isReadonly: true }
        Property { name: "mi_sms"; type: "string"; isReadonly: true }
        Property { name: "mi_sms_failed"; type: "string"; isReadonly: true }
        Property { name: "mi_snooze"; type: "string"; isReadonly: true }
        Property { name: "mi_sort"; type: "string"; isReadonly: true }
        Property { name: "mi_sort_by_alpha"; type: "string"; isReadonly: true }
        Property { name: "mi_spa"; type: "string"; isReadonly: true }
        Property { name: "mi_space_bar"; type: "string"; isReadonly: true }
        Property { name: "mi_speaker"; type: "string"; isReadonly: true }
        Property { name: "mi_speaker_group"; type: "string"; isReadonly: true }
        Property { name: "mi_speaker_notes"; type: "string"; isReadonly: true }
        Property { name: "mi_speaker_notes_off"; type: "string"; isReadonly: true }
        Property { name: "mi_speaker_phone"; type: "string"; isReadonly: true }
        Property { name: "mi_spellcheck"; type: "string"; isReadonly: true }
        Property { name: "mi_star"; type: "string"; isReadonly: true }
        Property { name: "mi_star_border"; type: "string"; isReadonly: true }
        Property { name: "mi_star_half"; type: "string"; isReadonly: true }
        Property { name: "mi_stars"; type: "string"; isReadonly: true }
        Property { name: "mi_stay_current_landscape"; type: "string"; isReadonly: true }
        Property { name: "mi_stay_current_portrait"; type: "string"; isReadonly: true }
        Property { name: "mi_stay_primary_landscape"; type: "string"; isReadonly: true }
        Property { name: "mi_stay_primary_portrait"; type: "string"; isReadonly: true }
        Property { name: "mi_stop"; type: "string"; isReadonly: true }
        Property { name: "mi_stop_screen_share"; type: "string"; isReadonly: true }
        Property { name: "mi_storage"; type: "string"; isReadonly: true }
        Property { name: "mi_store"; type: "string"; isReadonly: true }
        Property { name: "mi_store_mall_directory"; type: "string"; isReadonly: true }
        Property { name: "mi_straighten"; type: "string"; isReadonly: true }
        Property { name: "mi_streetview"; type: "string"; isReadonly: true }
        Property { name: "mi_strikethrough_s"; type: "string"; isReadonly: true }
        Property { name: "mi_style"; type: "string"; isReadonly: true }
        Property { name: "mi_subdirectory_arrow_left"; type: "string"; isReadonly: true }
        Property { name: "mi_subdirectory_arrow_right"; type: "string"; isReadonly: true }
        Property { name: "mi_subject"; type: "string"; isReadonly: true }
        Property { name: "mi_subscriptions"; type: "string"; isReadonly: true }
        Property { name: "mi_subtitles"; type: "string"; isReadonly: true }
        Property { name: "mi_subway"; type: "string"; isReadonly: true }
        Property { name: "mi_supervisor_account"; type: "string"; isReadonly: true }
        Property { name: "mi_surround_sound"; type: "string"; isReadonly: true }
        Property { name: "mi_swap_calls"; type: "string"; isReadonly: true }
        Property { name: "mi_swap_horiz"; type: "string"; isReadonly: true }
        Property { name: "mi_swap_vert"; type: "string"; isReadonly: true }
        Property { name: "mi_swap_vertical_circle"; type: "string"; isReadonly: true }
        Property { name: "mi_switch_camera"; type: "string"; isReadonly: true }
        Property { name: "mi_switch_video"; type: "string"; isReadonly: true }
        Property { name: "mi_sync"; type: "string"; isReadonly: true }
        Property { name: "mi_sync_disabled"; type: "string"; isReadonly: true }
        Property { name: "mi_sync_problem"; type: "string"; isReadonly: true }
        Property { name: "mi_system_update"; type: "string"; isReadonly: true }
        Property { name: "mi_system_update_alt"; type: "string"; isReadonly: true }
        Property { name: "mi_tab"; type: "string"; isReadonly: true }
        Property { name: "mi_tab_unselected"; type: "string"; isReadonly: true }
        Property { name: "mi_tablet"; type: "string"; isReadonly: true }
        Property { name: "mi_tablet_android"; type: "string"; isReadonly: true }
        Property { name: "mi_tablet_mac"; type: "string"; isReadonly: true }
        Property { name: "mi_tag_faces"; type: "string"; isReadonly: true }
        Property { name: "mi_tap_and_play"; type: "string"; isReadonly: true }
        Property { name: "mi_terrain"; type: "string"; isReadonly: true }
        Property { name: "mi_text_fields"; type: "string"; isReadonly: true }
        Property { name: "mi_text_format"; type: "string"; isReadonly: true }
        Property { name: "mi_textsms"; type: "string"; isReadonly: true }
        Property { name: "mi_texture"; type: "string"; isReadonly: true }
        Property { name: "mi_theaters"; type: "string"; isReadonly: true }
        Property { name: "mi_thumb_down"; type: "string"; isReadonly: true }
        Property { name: "mi_thumb_up"; type: "string"; isReadonly: true }
        Property { name: "mi_thumbs_up_down"; type: "string"; isReadonly: true }
        Property { name: "mi_time_to_leave"; type: "string"; isReadonly: true }
        Property { name: "mi_timelapse"; type: "string"; isReadonly: true }
        Property { name: "mi_timeline"; type: "string"; isReadonly: true }
        Property { name: "mi_timer"; type: "string"; isReadonly: true }
        Property { name: "mi_timer_10"; type: "string"; isReadonly: true }
        Property { name: "mi_timer_3"; type: "string"; isReadonly: true }
        Property { name: "mi_timer_off"; type: "string"; isReadonly: true }
        Property { name: "mi_title"; type: "string"; isReadonly: true }
        Property { name: "mi_toc"; type: "string"; isReadonly: true }
        Property { name: "mi_today"; type: "string"; isReadonly: true }
        Property { name: "mi_toll"; type: "string"; isReadonly: true }
        Property { name: "mi_tonality"; type: "string"; isReadonly: true }
        Property { name: "mi_touch_app"; type: "string"; isReadonly: true }
        Property { name: "mi_toys"; type: "string"; isReadonly: true }
        Property { name: "mi_track_changes"; type: "string"; isReadonly: true }
        Property { name: "mi_traffic"; type: "string"; isReadonly: true }
        Property { name: "mi_train"; type: "string"; isReadonly: true }
        Property { name: "mi_tram"; type: "string"; isReadonly: true }
        Property { name: "mi_transfer_within_a_station"; type: "string"; isReadonly: true }
        Property { name: "mi_transform"; type: "string"; isReadonly: true }
        Property { name: "mi_translate"; type: "string"; isReadonly: true }
        Property { name: "mi_trending_down"; type: "string"; isReadonly: true }
        Property { name: "mi_trending_flat"; type: "string"; isReadonly: true }
        Property { name: "mi_trending_up"; type: "string"; isReadonly: true }
        Property { name: "mi_tune"; type: "string"; isReadonly: true }
        Property { name: "mi_turned_in"; type: "string"; isReadonly: true }
        Property { name: "mi_turned_in_not"; type: "string"; isReadonly: true }
        Property { name: "mi_tv"; type: "string"; isReadonly: true }
        Property { name: "mi_unarchive"; type: "string"; isReadonly: true }
        Property { name: "mi_undo"; type: "string"; isReadonly: true }
        Property { name: "mi_unfold_less"; type: "string"; isReadonly: true }
        Property { name: "mi_unfold_more"; type: "string"; isReadonly: true }
        Property { name: "mi_update"; type: "string"; isReadonly: true }
        Property { name: "mi_usb"; type: "string"; isReadonly: true }
        Property { name: "mi_verified_user"; type: "string"; isReadonly: true }
        Property { name: "mi_vertical_align_bottom"; type: "string"; isReadonly: true }
        Property { name: "mi_vertical_align_center"; type: "string"; isReadonly: true }
        Property { name: "mi_vertical_align_top"; type: "string"; isReadonly: true }
        Property { name: "mi_vibration"; type: "string"; isReadonly: true }
        Property { name: "mi_video_call"; type: "string"; isReadonly: true }
        Property { name: "mi_video_label"; type: "string"; isReadonly: true }
        Property { name: "mi_video_library"; type: "string"; isReadonly: true }
        Property { name: "mi_videocam"; type: "string"; isReadonly: true }
        Property { name: "mi_videocam_off"; type: "string"; isReadonly: true }
        Property { name: "mi_videogame_asset"; type: "string"; isReadonly: true }
        Property { name: "mi_view_agenda"; type: "string"; isReadonly: true }
        Property { name: "mi_view_array"; type: "string"; isReadonly: true }
        Property { name: "mi_view_carousel"; type: "string"; isReadonly: true }
        Property { name: "mi_view_column"; type: "string"; isReadonly: true }
        Property { name: "mi_view_comfy"; type: "string"; isReadonly: true }
        Property { name: "mi_view_compact"; type: "string"; isReadonly: true }
        Property { name: "mi_view_day"; type: "string"; isReadonly: true }
        Property { name: "mi_view_headline"; type: "string"; isReadonly: true }
        Property { name: "mi_view_list"; type: "string"; isReadonly: true }
        Property { name: "mi_view_module"; type: "string"; isReadonly: true }
        Property { name: "mi_view_quilt"; type: "string"; isReadonly: true }
        Property { name: "mi_view_stream"; type: "string"; isReadonly: true }
        Property { name: "mi_view_week"; type: "string"; isReadonly: true }
        Property { name: "mi_vignette"; type: "string"; isReadonly: true }
        Property { name: "mi_visibility"; type: "string"; isReadonly: true }
        Property { name: "mi_visibility_off"; type: "string"; isReadonly: true }
        Property { name: "mi_voice_chat"; type: "string"; isReadonly: true }
        Property { name: "mi_voicemail"; type: "string"; isReadonly: true }
        Property { name: "mi_volume_down"; type: "string"; isReadonly: true }
        Property { name: "mi_volume_mute"; type: "string"; isReadonly: true }
        Property { name: "mi_volume_off"; type: "string"; isReadonly: true }
        Property { name: "mi_volume_up"; type: "string"; isReadonly: true }
        Property { name: "mi_vpn_key"; type: "string"; isReadonly: true }
        Property { name: "mi_vpn_lock"; type: "string"; isReadonly: true }
        Property { name: "mi_wallpaper"; type: "string"; isReadonly: true }
        Property { name: "mi_warning"; type: "string"; isReadonly: true }
        Property { name: "mi_watch"; type: "string"; isReadonly: true }
        Property { name: "mi_watch_later"; type: "string"; isReadonly: true }
        Property { name: "mi_wb_auto"; type: "string"; isReadonly: true }
        Property { name: "mi_wb_cloudy"; type: "string"; isReadonly: true }
        Property { name: "mi_wb_incandescent"; type: "string"; isReadonly: true }
        Property { name: "mi_wb_iridescent"; type: "string"; isReadonly: true }
        Property { name: "mi_wb_sunny"; type: "string"; isReadonly: true }
        Property { name: "mi_wc"; type: "string"; isReadonly: true }
        Property { name: "mi_web"; type: "string"; isReadonly: true }
        Property { name: "mi_web_asset"; type: "string"; isReadonly: true }
        Property { name: "mi_weekend"; type: "string"; isReadonly: true }
        Property { name: "mi_whatshot"; type: "string"; isReadonly: true }
        Property { name: "mi_widgets"; type: "string"; isReadonly: true }
        Property { name: "mi_wifi"; type: "string"; isReadonly: true }
        Property { name: "mi_wifi_lock"; type: "string"; isReadonly: true }
        Property { name: "mi_wifi_tethering"; type: "string"; isReadonly: true }
        Property { name: "mi_work"; type: "string"; isReadonly: true }
        Property { name: "mi_wrap_text"; type: "string"; isReadonly: true }
        Property { name: "mi_youtube_searched_for"; type: "string"; isReadonly: true }
        Property { name: "mi_zoom_in"; type: "string"; isReadonly: true }
        Property { name: "mi_zoom_out"; type: "string"; isReadonly: true }
        Property { name: "mi_zoom_out_map"; type: "string"; isReadonly: true }
    }
    Component {
        prototype: "QQuickMenu"
        name: "QtQuick.Controls/Menu 2.0"
        exports: ["QtQuick.Controls/Menu 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickMenuItem"
        name: "QtQuick.Controls/MenuItem 2.0"
        exports: ["QtQuick.Controls/MenuItem 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickMenuSeparator"
        name: "QtQuick.Controls/MenuSeparator 2.1"
        exports: ["QtQuick.Controls/MenuSeparator 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickMessageDialog"
        name: "QtQuick.Dialogs/MessageDialog 1.1"
        exports: ["QtQuick.Dialogs/MessageDialog 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "contentItem"
        Method { name: "calculateImplicitWidth"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickPage"
        name: "QtQuick.Controls/Page 2.0"
        exports: ["QtQuick.Controls/Page 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickPageIndicator"
        name: "QtQuick.Controls/PageIndicator 2.0"
        exports: ["QtQuick.Controls/PageIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickPane"
        name: "QtQuick.Controls/Pane 2.0"
        exports: ["QtQuick.Controls/Pane 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/PieMenu 1.0"
        exports: ["QtQuick.Extras/PieMenu 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "menuItems"
        Property { name: "selectionAngle"; type: "double"; isReadonly: true }
        Property { name: "triggerMode"; type: "int" }
        Property { name: "title"; type: "string" }
        Property { name: "boundingItem"; type: "QQuickItem"; isPointer: true }
        Property { name: "__protectedScope"; type: "QObject"; isPointer: true }
        Property { name: "activationMode"; type: "int" }
        Property { name: "menuItems"; type: "QQuickMenuItem1"; isList: true; isReadonly: true }
        Property { name: "currentIndex"; type: "int"; isReadonly: true }
        Property { name: "currentItem"; type: "QQuickMenuItem1"; isReadonly: true; isPointer: true }
        Property { name: "__mouseThief"; type: "QQuickMouseThief"; isReadonly: true; isPointer: true }
        Method {
            name: "popup"
            type: "QVariant"
            Parameter { name: "x"; type: "QVariant" }
            Parameter { name: "y"; type: "QVariant" }
        }
        Method {
            name: "addItem"
            type: "QVariant"
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "insertItem"
            type: "QVariant"
            Parameter { name: "before"; type: "QVariant" }
            Parameter { name: "text"; type: "QVariant" }
        }
        Method {
            name: "removeItem"
            type: "QVariant"
            Parameter { name: "item"; type: "QVariant" }
        }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickLoader"
        name: "QtQuick.Extras.Private/PieMenuIcon 1.0"
        exports: ["QtQuick.Extras.Private/PieMenuIcon 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "PieMenu_QMLTYPE_233"; isPointer: true }
        Property { name: "styleData"; type: "QObject"; isPointer: true }
        Property { name: "iconSource"; type: "string"; isReadonly: true }
    }
    Component {
        prototype: "QQuickPopup"
        name: "QtQuick.Controls/Popup 2.0"
        exports: ["QtQuick.Controls/Popup 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickProgressBar"
        name: "QtQuick.Controls/ProgressBar 2.0"
        exports: ["QtQuick.Controls/ProgressBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickRadioButton"
        name: "QtQuick.Controls/RadioButton 2.0"
        exports: ["QtQuick.Controls/RadioButton 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickRadioDelegate"
        name: "QtQuick.Controls/RadioDelegate 2.0"
        exports: ["QtQuick.Controls/RadioDelegate 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickRectangle"
        name: "QtQuick.Controls.impl/RadioIndicator 2.0"
        exports: ["QtQuick.Controls.impl/RadioIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "QtQuick.Controls.Material.impl/RadioIndicator 2.0"
        exports: ["QtQuick.Controls.Material.impl/RadioIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        prototype: "QQuickRectangle"
        name: "QtQuick.Controls.Universal.impl/RadioIndicator 2.0"
        exports: ["QtQuick.Controls.Universal.impl/RadioIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QVariant" }
    }
    Component {
        prototype: "QQuickRangeSlider"
        name: "QtQuick.Controls/RangeSlider 2.0"
        exports: ["QtQuick.Controls/RangeSlider 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.Controls.Material.impl/RectangularGlow 2.0"
        exports: ["QtQuick.Controls.Material.impl/RectangularGlow 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "glowRadius"; type: "double" }
        Property { name: "spread"; type: "double" }
        Property { name: "color"; type: "QColor" }
        Property { name: "cornerRadius"; type: "double" }
        Property { name: "cached"; type: "bool" }
    }
    Component {
        prototype: "QQuickRoundButton"
        name: "QtQuick.Controls/RoundButton 2.1"
        exports: ["QtQuick.Controls/RoundButton 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickScrollBar"
        name: "QtQuick.Controls/ScrollBar 2.0"
        exports: ["QtQuick.Controls/ScrollBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickScrollIndicator"
        name: "QtQuick.Controls/ScrollIndicator 2.0"
        exports: ["QtQuick.Controls/ScrollIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickScrollView"
        name: "QtQuick.Controls/ScrollView 2.2"
        exports: ["QtQuick.Controls/ScrollView 2.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickSlider"
        name: "QtQuick.Controls/Slider 2.0"
        exports: ["QtQuick.Controls/Slider 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.Controls.Material.impl/SliderHandle 2.0"
        exports: ["QtQuick.Controls.Material.impl/SliderHandle 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "value"; type: "double" }
        Property { name: "handleHasFocus"; type: "bool" }
        Property { name: "handlePressed"; type: "bool" }
        Property { name: "handleHovered"; type: "bool" }
        Property { name: "initialSize"; type: "int"; isReadonly: true }
        Property { name: "horizontal"; type: "bool"; isReadonly: true }
        Property { name: "control"; type: "QVariant"; isReadonly: true }
    }
    Component {
        prototype: "QQuickSpinBox"
        name: "QtQuick.Controls/SpinBox 2.0"
        exports: ["QtQuick.Controls/SpinBox 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickStackView"
        name: "QtQuick.Controls/StackView 2.0"
        exports: ["QtQuick.Controls/StackView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/StatusIndicator 1.1"
        exports: ["QtQuick.Extras/StatusIndicator 1.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "on"; type: "bool" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/StatusIndicator 1.0"
        exports: ["QtQuick.Extras/StatusIndicator 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "active"; type: "bool" }
        Property { name: "color"; type: "QColor" }
        Property { name: "on"; type: "bool" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickSwipeDelegate"
        name: "QtQuick.Controls/SwipeDelegate 2.0"
        exports: ["QtQuick.Controls/SwipeDelegate 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickSwipeView"
        name: "QtQuick.Controls/SwipeView 2.0"
        exports: ["QtQuick.Controls/SwipeView 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickSwitch"
        name: "QtQuick.Controls/Switch 2.0"
        exports: ["QtQuick.Controls/Switch 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickSwitchDelegate"
        name: "QtQuick.Controls/SwitchDelegate 2.0"
        exports: ["QtQuick.Controls/SwitchDelegate 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.Controls.Universal.impl/SwitchIndicator 2.0"
        exports: ["QtQuick.Controls.Universal.impl/SwitchIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.Controls.impl/SwitchIndicator 2.0"
        exports: ["QtQuick.Controls.impl/SwitchIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
    }
    Component {
        prototype: "QQuickItem"
        name: "QtQuick.Controls.Material.impl/SwitchIndicator 2.0"
        exports: ["QtQuick.Controls.Material.impl/SwitchIndicator 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "control"; type: "QQuickItem"; isPointer: true }
        Property { name: "handle"; type: "QQuickRectangle"; isReadonly: true; isPointer: true }
    }
    Component {
        prototype: "QQuickTabBar"
        name: "QtQuick.Controls/TabBar 2.0"
        exports: ["QtQuick.Controls/TabBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickTabButton"
        name: "QtQuick.Controls/TabButton 2.0"
        exports: ["QtQuick.Controls/TabButton 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickTextArea"
        name: "QtQuick.Controls/TextArea 2.0"
        exports: ["QtQuick.Controls/TextArea 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickTextField"
        name: "QtQuick.Controls/TextField 2.0"
        exports: ["QtQuick.Controls/TextField 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickText"
        name: "QtQuick.Extras.Private/TextSingleton 1.0"
        exports: ["QtQuick.Extras.Private/TextSingleton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        isCreatable: false
        isSingleton: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/ToggleButton 1.0"
        exports: ["QtQuick.Extras/ToggleButton 1.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
        Property { name: "isDefault"; type: "bool" }
        Property { name: "menu"; type: "Menu_QMLTYPE_51"; isPointer: true }
        Property { name: "checkable"; type: "bool" }
        Property { name: "checked"; type: "bool" }
        Property { name: "exclusiveGroup"; type: "QQuickExclusiveGroup1"; isPointer: true }
        Property { name: "action"; type: "QQuickAction1"; isPointer: true }
        Property { name: "activeFocusOnPress"; type: "bool" }
        Property { name: "text"; type: "string" }
        Property { name: "tooltip"; type: "string" }
        Property { name: "iconSource"; type: "QUrl" }
        Property { name: "iconName"; type: "string" }
        Property { name: "__position"; type: "string" }
        Property { name: "__iconOverriden"; type: "bool"; isReadonly: true }
        Property { name: "__action"; type: "QQuickAction1"; isPointer: true }
        Property { name: "__iconAction"; type: "QQuickAction1"; isReadonly: true; isPointer: true }
        Property { name: "__behavior"; type: "QVariant" }
        Property { name: "__effectivePressed"; type: "bool" }
        Property { name: "pressed"; type: "bool"; isReadonly: true }
        Property { name: "hovered"; type: "bool"; isReadonly: true }
        Signal { name: "clicked" }
        Method { name: "accessiblePressAction"; type: "QVariant" }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QQuickToolBar"
        name: "QtQuick.Controls/ToolBar 2.0"
        exports: ["QtQuick.Controls/ToolBar 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickToolButton"
        name: "QtQuick.Controls/ToolButton 2.0"
        exports: ["QtQuick.Controls/ToolButton 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickToolSeparator"
        name: "QtQuick.Controls/ToolSeparator 2.1"
        exports: ["QtQuick.Controls/ToolSeparator 2.1"]
        exportMetaObjectRevisions: [1]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickToolTip"
        name: "QtQuick.Controls/ToolTip 2.0"
        exports: ["QtQuick.Controls/ToolTip 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "contentData"
    }
    Component {
        prototype: "QQuickTumbler"
        name: "QtQuick.Controls/Tumbler 2.0"
        exports: ["QtQuick.Controls/Tumbler 2.0"]
        exportMetaObjectRevisions: [0]
        isComposite: true
        defaultProperty: "data"
    }
    Component {
        prototype: "QQuickFocusScope"
        name: "QtQuick.Extras/Tumbler 1.2"
        exports: ["QtQuick.Extras/Tumbler 1.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        defaultProperty: "data"
        Property { name: "__highlightMoveDuration"; type: "int" }
        Property { name: "columnCount"; type: "int"; isReadonly: true }
        Property { name: "__columnRow"; type: "QQuickRow"; isReadonly: true; isPointer: true }
        Property { name: "__movementDelayTimer"; type: "QQmlTimer"; isReadonly: true; isPointer: true }
        Method {
            name: "__isValidColumnIndex"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Method {
            name: "__isValidColumnAndItemIndex"
            type: "QVariant"
            Parameter { name: "columnIndex"; type: "QVariant" }
            Parameter { name: "itemIndex"; type: "QVariant" }
        }
        Method {
            name: "currentIndexAt"
            type: "QVariant"
            Parameter { name: "columnIndex"; type: "QVariant" }
        }
        Method {
            name: "setCurrentIndexAt"
            type: "QVariant"
            Parameter { name: "columnIndex"; type: "QVariant" }
            Parameter { name: "itemIndex"; type: "QVariant" }
            Parameter { name: "interval"; type: "QVariant" }
        }
        Method {
            name: "getColumn"
            type: "QVariant"
            Parameter { name: "columnIndex"; type: "QVariant" }
        }
        Method {
            name: "addColumn"
            type: "QVariant"
            Parameter { name: "column"; type: "QVariant" }
        }
        Method {
            name: "insertColumn"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
            Parameter { name: "column"; type: "QVariant" }
        }
        Method {
            name: "__viewAt"
            type: "QVariant"
            Parameter { name: "index"; type: "QVariant" }
        }
        Property { name: "style"; type: "QQmlComponent"; isPointer: true }
        Property { name: "__style"; type: "QObject"; isPointer: true }
        Property { name: "__panel"; type: "QQuickItem"; isPointer: true }
        Property { name: "styleHints"; type: "QVariant" }
        Property { name: "__styleData"; type: "QObject"; isPointer: true }
    }
    Component {
        prototype: "QObject"
        name: "QtQuick.Extras/TumblerColumn 1.2"
        exports: ["QtQuick.Extras/TumblerColumn 1.2"]
        exportMetaObjectRevisions: [2]
        isComposite: true
        Property { name: "__tumbler"; type: "QQuickItem"; isPointer: true }
        Property { name: "__index"; type: "int" }
        Property { name: "__currentIndex"; type: "int" }
        Property { name: "model"; type: "QVariant" }
        Property { name: "role"; type: "string" }
        Property { name: "delegate"; type: "QQmlComponent"; isPointer: true }
        Property { name: "highlight"; type: "QQmlComponent"; isPointer: true }
        Property { name: "columnForeground"; type: "QQmlComponent"; isPointer: true }
        Property { name: "visible"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "width"; type: "double" }
        Property { name: "currentIndex"; type: "int"; isReadonly: true }
    }
}

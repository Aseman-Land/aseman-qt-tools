import QtQuick.tooling 1.2

// This file describes the plugin-supplied types contained in the library.
// It is used for QML tooling purposes only.
//
// This file was auto-generated by:
// 'qmlplugindump -v -nonrelocatable AsemanTools 1.0 /home/bardia/Projects/build/asemantools/Desktop_Qt_5_5_0_GCC_64bit/Debug/qml/AsemanTools/AsemanTools/..'

Module {
    dependencies: []
    Component {
        name: "AsemanAbstractListModel"
        prototype: "QAbstractListModel"
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "get"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "roleName"; type: "string" }
        }
        Method {
            name: "get"
            type: "QVariantMap"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "roles"; type: "QStringList" }
    }
    Component {
        name: "AsemanApplication"
        prototype: "QObject"
        exports: ["AsemanTools/AsemanApp 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ApplicationType"
            values: {
                "NoneApplication": 0,
                "GuiApplication": 1,
                "CoreApplication": 2,
                "WidgetApplication": 3
            }
        }
        Property { name: "homePath"; type: "string"; isReadonly: true }
        Property { name: "appPath"; type: "string"; isReadonly: true }
        Property { name: "appFilePath"; type: "string"; isReadonly: true }
        Property { name: "logPath"; type: "string" }
        Property { name: "confsPath"; type: "string"; isReadonly: true }
        Property { name: "tempPath"; type: "string"; isReadonly: true }
        Property { name: "backupsPath"; type: "string"; isReadonly: true }
        Property { name: "cameraPath"; type: "string"; isReadonly: true }
        Property { name: "appType"; type: "int"; isReadonly: true }
        Property { name: "isDebug"; type: "bool"; isReadonly: true }
        Property { name: "globalFont"; type: "QFont" }
        Property { name: "applicationName"; type: "string" }
        Property { name: "applicationVersion"; type: "string" }
        Property { name: "organizationName"; type: "string" }
        Property { name: "organizationDomain"; type: "string" }
        Property { name: "applicationDisplayName"; type: "string" }
        Property { name: "platformName"; type: "string"; isReadonly: true }
        Property { name: "quitOnLastWindowClosed"; type: "bool" }
        Signal { name: "fakeSignal" }
        Signal { name: "globalFontFamilyChanged" }
        Signal { name: "globalMonoFontFamilyChanged" }
        Signal { name: "languageUpdated" }
        Signal { name: "backRequest" }
        Signal { name: "clickedOnDock" }
        Signal { name: "lastWindowClosed" }
        Signal {
            name: "messageReceived"
            Parameter { name: "msg"; type: "string" }
        }
        Method { name: "refreshTranslations" }
        Method { name: "back" }
        Method { name: "exec"; type: "int" }
        Method {
            name: "exit"
            Parameter { name: "retcode"; type: "int" }
        }
        Method { name: "exit" }
        Method {
            name: "sleep"
            Parameter { name: "ms"; type: "qulonglong" }
        }
        Method {
            name: "sendMessage"
            Parameter { name: "msg"; type: "string" }
        }
        Method {
            name: "setSetting"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "readSetting"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "defaultValue"; type: "QVariant" }
        }
        Method {
            name: "readSetting"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
    }
    Component {
        name: "AsemanAutoStartManager"
        prototype: "QObject"
        exports: ["AsemanTools/AutoStartManager 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "command"; type: "string" }
        Property { name: "comment"; type: "string" }
        Property { name: "source"; type: "string" }
        Property { name: "name"; type: "string" }
        Property { name: "type"; type: "string" }
        Property { name: "active"; type: "bool" }
        Method { name: "refresh" }
        Method { name: "save" }
    }
    Component {
        name: "AsemanBackHandler"
        prototype: "QObject"
        exports: ["AsemanTools/BackHandler 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "topHandlerObject"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "topHandlerMethod"; type: "QJSValue"; isReadonly: true }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "topHandlerChanged" }
        Method {
            name: "pushHandler"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "jsv"; type: "QJSValue" }
        }
        Method {
            name: "pushDownHandler"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "jsv"; type: "QJSValue" }
        }
        Method {
            name: "removeHandler"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
        }
        Method { name: "tryPopHandler"; type: "QObject*" }
        Method { name: "forcePopHandler"; type: "QObject*" }
        Method { name: "back"; type: "bool" }
    }
    Component {
        name: "AsemanCalendarConverter"
        prototype: "QObject"
        exports: ["AsemanTools/CalendarConv 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "calendar"; type: "int" }
        Property { name: "calendarsID"; type: "QStringList"; isReadonly: true }
        Property { name: "currentDays"; type: "int"; isReadonly: true }
        Property { name: "currentYear"; type: "int"; isReadonly: true }
        Property { name: "currentMonth"; type: "int"; isReadonly: true }
        Property { name: "currentDay"; type: "int"; isReadonly: true }
        Signal { name: "fakeSignal" }
        Method {
            name: "calendarName"
            type: "string"
            Parameter { name: "t"; type: "int" }
        }
        Method {
            name: "convertIntToStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "convertIntToFullStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "convertIntToNumStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "translateInt"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
        }
        Method {
            name: "convertIntToStringDate"
            type: "string"
            Parameter { name: "d"; type: "qlonglong" }
            Parameter { name: "format"; type: "string" }
        }
        Method {
            name: "convertDateToGragorian"
            type: "QDate"
            Parameter { name: "year"; type: "qlonglong" }
            Parameter { name: "month"; type: "int" }
            Parameter { name: "day"; type: "int" }
        }
        Method {
            name: "fromMSecSinceEpoch"
            type: "string"
            Parameter { name: "t"; type: "qlonglong" }
        }
        Method {
            name: "convertDateTimeToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "convertDateTimeToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
            Parameter { name: "format"; type: "string" }
        }
        Method {
            name: "convertDateTimeToLittleString"
            type: "string"
            Parameter { name: "dt"; type: "QDate" }
        }
        Method {
            name: "daysOfMonth"
            type: "int"
            Parameter { name: "year"; type: "qlonglong" }
            Parameter { name: "month"; type: "int" }
        }
        Method {
            name: "monthName"
            type: "string"
            Parameter { name: "month"; type: "int" }
        }
        Method {
            name: "combineDateAndTime"
            type: "QDateTime"
            Parameter { name: "date"; type: "QDate" }
            Parameter { name: "time"; type: "QTime" }
        }
        Method {
            name: "dateMonth"
            type: "int"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "dateDay"
            type: "int"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "dateYear"
            type: "qlonglong"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "convertDaysToDate"
            type: "QDate"
            Parameter { name: "days"; type: "int" }
        }
        Method {
            name: "convertDateToDays"
            type: "int"
            Parameter { name: "date"; type: "QDate" }
        }
        Method {
            name: "fromTime_t"
            type: "QDateTime"
            Parameter { name: "sec"; type: "uint" }
        }
    }
    Component {
        name: "AsemanCalendarModel"
        prototype: "QObject"
        exports: ["AsemanTools/CalendarModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "CalendarTypes"
            values: {
                "CalendarGregorian": 0,
                "CalendarJalali": 1,
                "CalendarHijri": 2
            }
        }
        Property { name: "years"; type: "QList<int>"; isReadonly: true }
        Property { name: "months"; type: "QList<int>"; isReadonly: true }
        Property { name: "days"; type: "QList<int>"; isReadonly: true }
        Property { name: "hours"; type: "QList<int>"; isReadonly: true }
        Property { name: "minutes"; type: "QList<int>"; isReadonly: true }
        Property { name: "currentYearIndex"; type: "int"; isReadonly: true }
        Property { name: "currentMonthIndex"; type: "int"; isReadonly: true }
        Property { name: "currentDaysIndex"; type: "int"; isReadonly: true }
        Property { name: "currentHoursIndex"; type: "int"; isReadonly: true }
        Property { name: "currentMinutesIndex"; type: "int"; isReadonly: true }
        Property { name: "dateTime"; type: "QDateTime" }
        Property { name: "calendar"; type: "int" }
        Property { name: "minimum"; type: "QDateTime" }
        Property { name: "maximum"; type: "QDateTime" }
        Signal { name: "secondsChanged" }
        Method {
            name: "setConvertDate"
            Parameter { name: "yearIdx"; type: "int" }
            Parameter { name: "monthIdx"; type: "int" }
            Parameter { name: "dayIdx"; type: "int" }
            Parameter { name: "hourIdx"; type: "int" }
            Parameter { name: "minuteIdx"; type: "int" }
        }
        Method {
            name: "monthName"
            type: "string"
            Parameter { name: "month"; type: "int" }
        }
    }
    Component {
        name: "AsemanCountriesModel"
        prototype: "AsemanAbstractListModel"
        exports: ["AsemanTools/CountriesModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "ColorfullListModelRoles"
            values: {
                "NameRole": 256,
                "NativeNameRole": 257,
                "TldRole": 258,
                "Cca2Role": 259,
                "Ccn3Role": 260,
                "Cca3Role": 261,
                "CurrencyRole": 262,
                "CallingCodeRole": 263,
                "CapitalRole": 264,
                "AltSpellingsRole": 265,
                "RelevanceRole": 266,
                "RegionRole": 267,
                "SubregionRole": 268,
                "LanguageRole": 269,
                "LanguageCodesRole": 270,
                "TranslationsRole": 271,
                "LatlngRole": 272,
                "DemonymRole": 273,
                "BordersRole": 274,
                "AreaRole": 275,
                "KeyRole": 276
            }
        }
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "name"; type: "string" }
        }
    }
    Component {
        name: "AsemanDesktopTools"
        prototype: "QObject"
        exports: [
            "AsemanTools/AsemanDesktopTools 1.0",
            "AsemanTools/Desktop 1.0"
        ]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0, 0]
        Enum {
            name: "DesktopSession"
            values: {
                "Unknown": 0,
                "Gnome": 1,
                "GnomeFallBack": 2,
                "Unity": 3,
                "Kde": 4,
                "Windows": 5,
                "Mac": 6
            }
        }
        Enum {
            name: "YesOrNoType"
            values: {
                "Warning": 0,
                "Question": 1,
                "Information": 2,
                "Critical": 3
            }
        }
        Property { name: "titleBarColor"; type: "QColor"; isReadonly: true }
        Property { name: "titleBarTransparentColor"; type: "QColor"; isReadonly: true }
        Property { name: "titleBarTextColor"; type: "QColor"; isReadonly: true }
        Property { name: "titleBarIsDark"; type: "bool"; isReadonly: true }
        Property { name: "desktopSession"; type: "int"; isReadonly: true }
        Property { name: "fontFamilies"; type: "QStringList"; isReadonly: true }
        Property { name: "menuStyle"; type: "string" }
        Property { name: "currentMenuObject"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "tooltip"; type: "string" }
        Signal { name: "fakeSignal" }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
        }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getOpenFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getOpenFileName"; type: "string" }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "filter"; type: "string" }
        }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getSaveFileName"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getSaveFileName"; type: "string" }
        Method {
            name: "getExistingDirectory"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "startPath"; type: "string" }
        }
        Method {
            name: "getExistingDirectory"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getExistingDirectory"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getExistingDirectory"; type: "string" }
        Method {
            name: "getFont"
            type: "QFont"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "font"; type: "QFont" }
        }
        Method {
            name: "getFont"
            type: "QFont"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getFont"
            type: "QFont"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getFont"; type: "QFont" }
        Method {
            name: "getColor"
            type: "QColor"
            Parameter { name: "color"; type: "QColor" }
        }
        Method { name: "getColor"; type: "QColor" }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "defaultText"; type: "string" }
        }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
        }
        Method {
            name: "getText"
            type: "string"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
        }
        Method { name: "getText"; type: "string" }
        Method {
            name: "showMenu"
            type: "int"
            Parameter { name: "actions"; type: "QVariantList" }
            Parameter { name: "point"; type: "QPoint" }
        }
        Method {
            name: "showMenu"
            type: "int"
            Parameter { name: "actions"; type: "QVariantList" }
        }
        Method {
            name: "yesOrNo"
            type: "bool"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "yesOrNo"
            type: "bool"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
        Method {
            name: "showMessage"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
            Parameter { name: "type"; type: "int" }
        }
        Method {
            name: "showMessage"
            Parameter { name: "window"; type: "QWindow"; isPointer: true }
            Parameter { name: "title"; type: "string" }
            Parameter { name: "text"; type: "string" }
        }
    }
    Component {
        name: "AsemanDevices"
        prototype: "QObject"
        exports: ["AsemanTools/Devices 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "isMobile"; type: "bool"; isReadonly: true }
        Property { name: "isTablet"; type: "bool"; isReadonly: true }
        Property { name: "isLargeTablet"; type: "bool"; isReadonly: true }
        Property { name: "isTouchDevice"; type: "bool"; isReadonly: true }
        Property { name: "isDesktop"; type: "bool"; isReadonly: true }
        Property { name: "isMacX"; type: "bool"; isReadonly: true }
        Property { name: "isWindows"; type: "bool"; isReadonly: true }
        Property { name: "isWindows8"; type: "bool"; isReadonly: true }
        Property { name: "isLinux"; type: "bool"; isReadonly: true }
        Property { name: "isAndroid"; type: "bool"; isReadonly: true }
        Property { name: "isIOS"; type: "bool"; isReadonly: true }
        Property { name: "isUbuntuTouch"; type: "bool"; isReadonly: true }
        Property { name: "isWindowsPhone"; type: "bool"; isReadonly: true }
        Property { name: "screen"; type: "QObject"; isReadonly: true; isPointer: true }
        Property { name: "cameraIsAvailable"; type: "bool"; isReadonly: true }
        Property { name: "lcdPhysicalSize"; type: "double"; isReadonly: true }
        Property { name: "lcdPhysicalWidth"; type: "double"; isReadonly: true }
        Property { name: "lcdPhysicalHeight"; type: "double"; isReadonly: true }
        Property { name: "lcdDpiX"; type: "double"; isReadonly: true }
        Property { name: "lcdDpiY"; type: "double"; isReadonly: true }
        Property { name: "screenSize"; type: "QSize"; isReadonly: true }
        Property { name: "keyboardHeight"; type: "double"; isReadonly: true }
        Property { name: "localFilesPrePath"; type: "string"; isReadonly: true }
        Property { name: "densityDpi"; type: "int"; isReadonly: true }
        Property { name: "density"; type: "double"; isReadonly: true }
        Property { name: "fontDensity"; type: "double"; isReadonly: true }
        Property { name: "transparentStatusBar"; type: "bool"; isReadonly: true }
        Property { name: "transparentNavigationBar"; type: "bool"; isReadonly: true }
        Property { name: "standardTitleBarHeight"; type: "double"; isReadonly: true }
        Property { name: "clipboard"; type: "string" }
        Property { name: "clipboardUrl"; type: "QList<QUrl>" }
        Property { name: "keyboard"; type: "bool"; isReadonly: true }
        Property { name: "cameraLocation"; type: "string"; isReadonly: true }
        Property { name: "picturesLocation"; type: "string"; isReadonly: true }
        Property { name: "musicsLocation"; type: "string"; isReadonly: true }
        Property { name: "documentsLocation"; type: "string"; isReadonly: true }
        Property { name: "downloadsLocation"; type: "string"; isReadonly: true }
        Property { name: "resourcePath"; type: "string"; isReadonly: true }
        Property { name: "libsPath"; type: "string"; isReadonly: true }
        Signal {
            name: "incomingShare"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "msg"; type: "string" }
        }
        Signal {
            name: "incomingImage"
            Parameter { name: "path"; type: "string" }
        }
        Signal {
            name: "selectImageResult"
            Parameter { name: "path"; type: "string" }
        }
        Signal { name: "activityPaused" }
        Signal { name: "activityResumed" }
        Signal { name: "geometryChanged" }
        Method { name: "hideKeyboard" }
        Method { name: "showKeyboard" }
        Method {
            name: "share"
            Parameter { name: "subject"; type: "string" }
            Parameter { name: "message"; type: "string" }
        }
        Method {
            name: "openFile"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "shareFile"
            Parameter { name: "address"; type: "string" }
        }
        Method {
            name: "setClipboard"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "startCameraPicture"; type: "bool" }
        Method { name: "getOpenPictures"; type: "bool" }
    }
    Component {
        name: "AsemanDownloader"
        prototype: "QObject"
        exports: ["AsemanTools/Downloader 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "recievedBytes"; type: "qlonglong"; isReadonly: true }
        Property { name: "totalBytes"; type: "qlonglong"; isReadonly: true }
        Property { name: "destination"; type: "string" }
        Property { name: "path"; type: "string" }
        Property { name: "downloaderId"; type: "int" }
        Signal {
            name: "error"
            Parameter { name: "error"; type: "QStringList" }
        }
        Signal {
            name: "finished"
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal {
            name: "finishedWithId"
            Parameter { name: "id"; type: "int" }
            Parameter { name: "data"; type: "QByteArray" }
        }
        Signal { name: "failed" }
        Method { name: "start" }
    }
    Component {
        name: "AsemanDragArea"
        defaultProperty: "data"
        prototype: "QQuickItem"
        exports: ["AsemanTools/MouseDragArea 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "orientation"; type: "int" }
        Property { name: "minimum"; type: "int" }
        Property { name: "mouseX"; type: "int"; isReadonly: true }
        Property { name: "mouseY"; type: "int"; isReadonly: true }
        Signal { name: "positionChanged" }
        Signal { name: "pressed" }
        Signal { name: "released" }
    }
    Component {
        name: "AsemanDragObject"
        prototype: "QObject"
        exports: ["AsemanTools/DragObject 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "mimeData"; type: "AsemanMimeData"; isPointer: true }
        Property { name: "dropAction"; type: "int" }
        Property { name: "source"; type: "QQuickItem"; isPointer: true }
        Property { name: "image"; type: "QUrl" }
        Property { name: "hotSpot"; type: "QPoint" }
        Property { name: "imageData"; type: "QImage" }
        Property { name: "dragging"; type: "bool"; isReadonly: true }
        Method { name: "start"; type: "int" }
    }
    Component {
        name: "AsemanFileDownloaderQueue"
        prototype: "QObject"
        exports: ["AsemanTools/FileDownloaderQueue 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "capacity"; type: "int" }
        Property { name: "destination"; type: "string" }
        Signal {
            name: "finished"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
        }
        Signal {
            name: "progressChanged"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
            Parameter { name: "percent"; type: "double" }
        }
        Method {
            name: "download"
            Parameter { name: "url"; type: "string" }
            Parameter { name: "fileName"; type: "string" }
        }
    }
    Component {
        name: "AsemanFileDownloaderQueueItem"
        prototype: "QObject"
        exports: ["AsemanTools/FileDownloaderQueueItem 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "string" }
        Property { name: "fileName"; type: "string" }
        Property { name: "percent"; type: "double"; isReadonly: true }
        Property { name: "downloaderQueue"; type: "AsemanFileDownloaderQueue"; isPointer: true }
        Property { name: "result"; type: "string"; isReadonly: true }
    }
    Component {
        name: "AsemanFileSystemModel"
        prototype: "AsemanAbstractListModel"
        exports: ["AsemanTools/FileSystemModel 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "SortFlag"
            values: {
                "Name": 0,
                "Size": 1,
                "Date": 2
            }
        }
        Enum {
            name: "DataRole"
            values: {
                "FilePath": 256,
                "FileUrl": 257,
                "FileName": 258,
                "FileMime": 259,
                "FileSize": 260,
                "FileSuffix": 261,
                "FileBaseName": 262,
                "FileIsDir": 263,
                "FileModifiedDate": 264,
                "FileCreatedDate": 265
            }
        }
        Property { name: "showDirs"; type: "bool" }
        Property { name: "showDotAndDotDot"; type: "bool" }
        Property { name: "showDirsFirst"; type: "bool" }
        Property { name: "showFiles"; type: "bool" }
        Property { name: "showHidden"; type: "bool" }
        Property { name: "nameFilters"; type: "QStringList" }
        Property { name: "folder"; type: "string" }
        Property { name: "parentFolder"; type: "string"; isReadonly: true }
        Property { name: "sortField"; type: "int" }
        Property { name: "count"; type: "int"; isReadonly: true }
        Signal { name: "listChanged" }
        Method { name: "refresh" }
    }
    Component {
        name: "AsemanFontHandler"
        prototype: "QObject"
        exports: ["AsemanTools/FontHandler 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "fonts"; type: "QVariantMap" }
        Method { name: "openFontChooser" }
        Method {
            name: "fontOf"
            type: "QFont"
            Parameter { name: "script"; type: "int" }
        }
        Method {
            name: "textToHtml"
            type: "string"
            Parameter { name: "text"; type: "string" }
        }
        Method { name: "save"; type: "QByteArray" }
        Method {
            name: "load"
            Parameter { name: "data"; type: "QByteArray" }
        }
    }
    Component {
        name: "AsemanHashObject"
        prototype: "QObject"
        exports: ["AsemanTools/HashObject 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Method {
            name: "insert"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "insertMulti"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "remove"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "key"
            type: "QVariant"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "keys"
            type: "QStringList"
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "keys"; type: "QStringList" }
        Method {
            name: "value"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "values"
            type: "QVariantList"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "containt"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "containt"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "contains"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
        }
        Method {
            name: "contains"
            type: "QVariant"
            Parameter { name: "key"; type: "string" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method { name: "clear" }
        Method { name: "count"; type: "int" }
    }
    Component {
        name: "AsemanImageColorAnalizor"
        prototype: "QObject"
        exports: ["AsemanTools/ImageColorAnalizor 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "Method"
            values: {
                "Normal": 0,
                "MoreSaturation": 1
            }
        }
        Property { name: "source"; type: "QUrl" }
        Property { name: "color"; type: "QColor"; isReadonly: true }
        Property { name: "method"; type: "int" }
    }
    Component {
        name: "AsemanListObject"
        prototype: "QObject"
        exports: ["AsemanTools/ListObject 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "count"; type: "int"; isReadonly: true }
        Property { name: "list"; type: "QVariantList" }
        Method {
            name: "removeAll"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "removeOne"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "removeAt"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "takeLast"; type: "QVariant" }
        Method { name: "takeFirst"; type: "QVariant" }
        Method {
            name: "takeAt"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method { name: "clear" }
        Method { name: "last"; type: "QVariant" }
        Method { name: "first"; type: "QVariant" }
        Method {
            name: "insert"
            Parameter { name: "index"; type: "int" }
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "append"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "prepend"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method { name: "count"; type: "int" }
        Method { name: "isEmpty"; type: "bool" }
        Method {
            name: "at"
            type: "QVariant"
            Parameter { name: "index"; type: "int" }
        }
        Method {
            name: "indexOf"
            type: "int"
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "fromList"
            Parameter { name: "list"; type: "QVariantList" }
        }
        Method { name: "toList"; type: "QVariantList" }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "v"; type: "QVariant" }
        }
    }
    Component {
        name: "AsemanMapDownloader"
        prototype: "QObject"
        exports: ["AsemanTools/MapDownloader 1.0"]
        exportMetaObjectRevisions: [0]
        Enum {
            name: "MapProvider"
            values: {
                "MapProviderGoogle": 0
            }
        }
        Property { name: "destination"; type: "QUrl" }
        Property { name: "image"; type: "QUrl"; isReadonly: true }
        Property { name: "currentGeo"; type: "QPointF"; isReadonly: true }
        Property { name: "mapProvider"; type: "int" }
        Property { name: "size"; type: "QSize" }
        Property { name: "zoom"; type: "int" }
        Property { name: "downloading"; type: "bool"; isReadonly: true }
        Signal { name: "finished" }
        Method {
            name: "download"
            Parameter { name: "geo"; type: "QPointF" }
        }
        Method {
            name: "check"
            type: "bool"
            Parameter { name: "geo"; type: "QPointF" }
        }
        Method {
            name: "linkOf"
            type: "string"
            Parameter { name: "geo"; type: "QPointF" }
        }
        Method {
            name: "webLinkOf"
            type: "string"
            Parameter { name: "geo"; type: "QPointF" }
        }
        Method {
            name: "pathOf"
            type: "string"
            Parameter { name: "geo"; type: "QPointF" }
        }
    }
    Component {
        name: "AsemanMimeApps"
        prototype: "QObject"
        exports: ["AsemanTools/MimeApps 1.0"]
        exportMetaObjectRevisions: [0]
        Method {
            name: "openFiles"
            Parameter { name: "app"; type: "string" }
            Parameter { name: "files"; type: "QStringList" }
        }
        Method {
            name: "appsOfMime"
            type: "QStringList"
            Parameter { name: "mime"; type: "string" }
        }
        Method {
            name: "appsOfFile"
            type: "QStringList"
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "appName"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appIcon"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appGenericName"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appComment"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appPath"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appCommand"
            type: "string"
            Parameter { name: "app"; type: "string" }
        }
        Method {
            name: "appMimes"
            type: "QStringList"
            Parameter { name: "app"; type: "string" }
        }
    }
    Component {
        name: "AsemanMimeData"
        prototype: "QObject"
        exports: ["AsemanTools/MimeData 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "text"; type: "string" }
        Property { name: "html"; type: "string" }
        Property { name: "urls"; type: "QList<QUrl>" }
        Property { name: "dataMap"; type: "QVariantMap" }
    }
    Component {
        name: "AsemanNativeNotification"
        prototype: "QObject"
        exports: ["AsemanTools/Notification 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "color"; type: "QColor" }
        Signal {
            name: "notifyClosed"
            Parameter { name: "id"; type: "uint" }
        }
        Signal {
            name: "notifyTimedOut"
            Parameter { name: "id"; type: "uint" }
        }
        Signal {
            name: "notifyAction"
            Parameter { name: "id"; type: "uint" }
            Parameter { name: "action"; type: "string" }
        }
        Method {
            name: "sendNotify"
            type: "uint"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "body"; type: "string" }
            Parameter { name: "icon"; type: "string" }
            Parameter { name: "replace_id"; type: "uint" }
            Parameter { name: "timeOut"; type: "int" }
            Parameter { name: "actions"; type: "QStringList" }
        }
        Method {
            name: "sendNotify"
            type: "uint"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "body"; type: "string" }
            Parameter { name: "icon"; type: "string" }
            Parameter { name: "replace_id"; type: "uint" }
            Parameter { name: "timeOut"; type: "int" }
        }
        Method {
            name: "sendNotify"
            type: "uint"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "body"; type: "string" }
            Parameter { name: "icon"; type: "string" }
            Parameter { name: "replace_id"; type: "uint" }
        }
        Method {
            name: "sendNotify"
            type: "uint"
            Parameter { name: "title"; type: "string" }
            Parameter { name: "body"; type: "string" }
            Parameter { name: "icon"; type: "string" }
        }
        Method {
            name: "closeNotification"
            Parameter { name: "id"; type: "uint" }
        }
    }
    Component {
        name: "AsemanQtLogger"
        prototype: "QObject"
        exports: ["AsemanTools/Logger 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "debug"
            Parameter { name: "var"; type: "QVariant" }
        }
    }
    Component {
        name: "AsemanQuickItemImageGrabber"
        prototype: "QObject"
        exports: ["AsemanTools/ItemImageGrabber 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "item"; type: "QQuickItem"; isPointer: true }
        Property { name: "image"; type: "QImage"; isReadonly: true }
        Property { name: "defaultImage"; type: "QUrl" }
        Method { name: "start" }
    }
    Component {
        name: "AsemanQuickObject"
        defaultProperty: "items"
        prototype: "QObject"
        exports: ["AsemanTools/AsemanObject 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "items"; type: "QObject"; isList: true; isReadonly: true }
    }
    Component {
        name: "AsemanQuickViewWrapper"
        prototype: "QObject"
        exports: ["AsemanTools/View 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Property { name: "fullscreen"; type: "bool" }
        Property { name: "backController"; type: "bool" }
        Property { name: "reverseScroll"; type: "bool" }
        Property { name: "statusBarHeight"; type: "double"; isReadonly: true }
        Property { name: "navigationBarHeight"; type: "double"; isReadonly: true }
        Property { name: "root"; type: "QObject"; isPointer: true }
        Property { name: "focusedText"; type: "QQuickItem"; isPointer: true }
        Property { name: "layoutDirection"; type: "int" }
        Property { name: "flickVelocity"; type: "double"; isReadonly: true }
        Property { name: "window"; type: "QWindow"; isReadonly: true; isPointer: true }
        Signal { name: "fakeSignal" }
        Signal { name: "closeRequest" }
        Method { name: "discardFocusedText" }
        Method { name: "tryClose" }
        Method {
            name: "setMask"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
            Parameter { name: "width"; type: "double" }
            Parameter { name: "height"; type: "double" }
        }
        Method {
            name: "move"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
        Method {
            name: "resize"
            Parameter { name: "w"; type: "double" }
            Parameter { name: "h"; type: "double" }
        }
        Method { name: "screenSize"; type: "QSize" }
    }
    Component {
        name: "AsemanTaskbarButton"
        prototype: "QObject"
        exports: ["AsemanTools/TaskbarButton 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "badgeNumber"; type: "int" }
        Property { name: "progress"; type: "double" }
        Property { name: "launcher"; type: "string" }
        Property { name: "window"; type: "QWindow"; isPointer: true }
        Method { name: "userAttention" }
    }
    Component {
        name: "AsemanTitleBarColorGrabber"
        prototype: "QObject"
        exports: ["AsemanTools/TitleBarColorGrabber 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "window"; type: "QWindow"; isPointer: true }
        Property { name: "autoRefresh"; type: "bool" }
        Property { name: "color"; type: "QColor"; isReadonly: true }
        Method { name: "refresh" }
    }
    Component {
        name: "AsemanTools"
        prototype: "QObject"
        exports: ["AsemanTools/Tools 1.0"]
        isCreatable: false
        isSingleton: true
        exportMetaObjectRevisions: [0]
        Method {
            name: "debug"
            Parameter { name: "var"; type: "QVariant" }
        }
        Method { name: "currentDate"; type: "QDateTime" }
        Method {
            name: "dateToMSec"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "mSecToDate"
            type: "QDateTime"
            Parameter { name: "ms"; type: "string" }
        }
        Method {
            name: "dateToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
            Parameter { name: "format"; type: "string" }
        }
        Method {
            name: "dateToString"
            type: "string"
            Parameter { name: "dt"; type: "QDateTime" }
        }
        Method {
            name: "fileName"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "fileSuffix"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "readText"
            type: "string"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "filesOf"
            type: "QStringList"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "stringLinks"
            type: "QStringList"
            Parameter { name: "str"; type: "string" }
        }
        Method {
            name: "stringToUrl"
            type: "QUrl"
            Parameter { name: "path"; type: "string" }
        }
        Method {
            name: "urlToLocalPath"
            type: "string"
            Parameter { name: "url"; type: "QUrl" }
        }
        Method { name: "qtVersion"; type: "string" }
        Method { name: "aboutAseman"; type: "string" }
        Method {
            name: "deleteItemDelay"
            Parameter { name: "o"; type: "QObject"; isPointer: true }
            Parameter { name: "ms"; type: "int" }
        }
        Method {
            name: "colorHue"
            type: "double"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "colorLightness"
            type: "double"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "colorSaturation"
            type: "double"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "mkDir"
            Parameter { name: "dir"; type: "string" }
        }
        Method {
            name: "colorHsl"
            type: "QVariantMap"
            Parameter { name: "clr"; type: "QColor" }
        }
        Method {
            name: "createVideoThumbnail"
            type: "bool"
            Parameter { name: "video"; type: "string" }
            Parameter { name: "output"; type: "string" }
            Parameter { name: "ffmpegPath"; type: "string" }
        }
        Method {
            name: "createVideoThumbnail"
            type: "bool"
            Parameter { name: "video"; type: "string" }
            Parameter { name: "output"; type: "string" }
        }
        Method {
            name: "translateNumbers"
            type: "string"
            Parameter { name: "input"; type: "string" }
        }
        Method {
            name: "passToMd5"
            type: "string"
            Parameter { name: "pass"; type: "string" }
        }
        Method { name: "createUuid"; type: "string" }
        Method {
            name: "htmlToPlaintText"
            type: "string"
            Parameter { name: "html"; type: "string" }
        }
        Method {
            name: "copyDirectory"
            Parameter { name: "src"; type: "string" }
            Parameter { name: "dst"; type: "string" }
        }
        Method {
            name: "deleteFile"
            Parameter { name: "file"; type: "string" }
        }
        Method {
            name: "clearDirectory"
            Parameter { name: "dir"; type: "string" }
        }
        Method {
            name: "setProperty"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "property"; type: "string" }
            Parameter { name: "v"; type: "QVariant" }
        }
        Method {
            name: "property"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "property"; type: "string" }
        }
        Method {
            name: "directionOf"
            type: "Qt::LayoutDirection"
            Parameter { name: "str"; type: "string" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
            Parameter { name: "v7"; type: "QVariant" }
            Parameter { name: "v8"; type: "QVariant" }
            Parameter { name: "v9"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
            Parameter { name: "v7"; type: "QVariant" }
            Parameter { name: "v8"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
            Parameter { name: "v7"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
            Parameter { name: "v6"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
            Parameter { name: "v5"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
            Parameter { name: "v4"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
            Parameter { name: "v3"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
            Parameter { name: "v2"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
            Parameter { name: "v1"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
            Parameter { name: "v0"; type: "QVariant" }
        }
        Method {
            name: "call"
            type: "QVariant"
            Parameter { name: "obj"; type: "QObject"; isPointer: true }
            Parameter { name: "member"; type: "string" }
            Parameter { name: "type"; type: "Qt::ConnectionType" }
        }
    }
    Component {
        name: "AsemanWebPageGrabber"
        defaultProperty: "items"
        prototype: "AsemanQuickObject"
        exports: ["AsemanTools/WebPageGrabber 1.0"]
        exportMetaObjectRevisions: [0]
        Property { name: "source"; type: "QUrl" }
        Property { name: "destination"; type: "string" }
        Property { name: "timeOut"; type: "int" }
        Property { name: "running"; type: "bool"; isReadonly: true }
        Property { name: "isAvailable"; type: "bool"; isReadonly: true }
        Signal {
            name: "complete"
            Parameter { name: "image"; type: "QImage" }
        }
        Signal {
            name: "finished"
            Parameter { name: "path"; type: "QUrl" }
        }
        Method {
            name: "start"
            Parameter { name: "force"; type: "bool" }
        }
        Method { name: "start" }
        Method {
            name: "check"
            type: "QUrl"
            Parameter { name: "source"; type: "QUrl" }
            Parameter { name: "destPath"; type: "string"; isPointer: true }
        }
        Method {
            name: "check"
            type: "QUrl"
            Parameter { name: "source"; type: "QUrl" }
        }
    }
    Component {
        name: "QAbstractItemModel"
        prototype: "QObject"
        Enum {
            name: "LayoutChangeHint"
            values: {
                "NoLayoutChangeHint": 0,
                "VerticalSortHint": 1,
                "HorizontalSortHint": 2
            }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
            Parameter { name: "roles"; type: "QVector<int>" }
        }
        Signal {
            name: "dataChanged"
            Parameter { name: "topLeft"; type: "QModelIndex" }
            Parameter { name: "bottomRight"; type: "QModelIndex" }
        }
        Signal {
            name: "headerDataChanged"
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutChanged" }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
            Parameter { name: "hint"; type: "QAbstractItemModel::LayoutChangeHint" }
        }
        Signal {
            name: "layoutAboutToBeChanged"
            Parameter { name: "parents"; type: "QList<QPersistentModelIndex>" }
        }
        Signal { name: "layoutAboutToBeChanged" }
        Signal {
            name: "rowsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "rowsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsInserted"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal {
            name: "columnsRemoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "first"; type: "int" }
            Parameter { name: "last"; type: "int" }
        }
        Signal { name: "modelAboutToBeReset" }
        Signal { name: "modelReset" }
        Signal {
            name: "rowsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationRow"; type: "int" }
        }
        Signal {
            name: "rowsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "row"; type: "int" }
        }
        Signal {
            name: "columnsAboutToBeMoved"
            Parameter { name: "sourceParent"; type: "QModelIndex" }
            Parameter { name: "sourceStart"; type: "int" }
            Parameter { name: "sourceEnd"; type: "int" }
            Parameter { name: "destinationParent"; type: "QModelIndex" }
            Parameter { name: "destinationColumn"; type: "int" }
        }
        Signal {
            name: "columnsMoved"
            Parameter { name: "parent"; type: "QModelIndex" }
            Parameter { name: "start"; type: "int" }
            Parameter { name: "end"; type: "int" }
            Parameter { name: "destination"; type: "QModelIndex" }
            Parameter { name: "column"; type: "int" }
        }
        Method { name: "submit"; type: "bool" }
        Method { name: "revert" }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "hasIndex"
            type: "bool"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "index"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
        }
        Method {
            name: "parent"
            type: "QModelIndex"
            Parameter { name: "child"; type: "QModelIndex" }
        }
        Method {
            name: "sibling"
            type: "QModelIndex"
            Parameter { name: "row"; type: "int" }
            Parameter { name: "column"; type: "int" }
            Parameter { name: "idx"; type: "QModelIndex" }
        }
        Method {
            name: "rowCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "rowCount"; type: "int" }
        Method {
            name: "columnCount"
            type: "int"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "columnCount"; type: "int" }
        Method {
            name: "hasChildren"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method { name: "hasChildren"; type: "bool" }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "data"
            type: "QVariant"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "setData"
            type: "bool"
            Parameter { name: "index"; type: "QModelIndex" }
            Parameter { name: "value"; type: "QVariant" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
            Parameter { name: "role"; type: "int" }
        }
        Method {
            name: "headerData"
            type: "QVariant"
            Parameter { name: "section"; type: "int" }
            Parameter { name: "orientation"; type: "Qt::Orientation" }
        }
        Method {
            name: "fetchMore"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "canFetchMore"
            type: "bool"
            Parameter { name: "parent"; type: "QModelIndex" }
        }
        Method {
            name: "flags"
            type: "Qt::ItemFlags"
            Parameter { name: "index"; type: "QModelIndex" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
            Parameter { name: "flags"; type: "Qt::MatchFlags" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
            Parameter { name: "hits"; type: "int" }
        }
        Method {
            name: "match"
            type: "QModelIndexList"
            Parameter { name: "start"; type: "QModelIndex" }
            Parameter { name: "role"; type: "int" }
            Parameter { name: "value"; type: "QVariant" }
        }
    }
    Component { name: "QAbstractListModel"; prototype: "QAbstractItemModel" }
    Component {
        name: "QQuickItem"
        defaultProperty: "data"
        prototype: "QObject"
        Enum {
            name: "TransformOrigin"
            values: {
                "TopLeft": 0,
                "Top": 1,
                "TopRight": 2,
                "Left": 3,
                "Center": 4,
                "Right": 5,
                "BottomLeft": 6,
                "Bottom": 7,
                "BottomRight": 8
            }
        }
        Property { name: "parent"; type: "QQuickItem"; isPointer: true }
        Property { name: "data"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "resources"; type: "QObject"; isList: true; isReadonly: true }
        Property { name: "children"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "x"; type: "double" }
        Property { name: "y"; type: "double" }
        Property { name: "z"; type: "double" }
        Property { name: "width"; type: "double" }
        Property { name: "height"; type: "double" }
        Property { name: "opacity"; type: "double" }
        Property { name: "enabled"; type: "bool" }
        Property { name: "visible"; type: "bool" }
        Property { name: "visibleChildren"; type: "QQuickItem"; isList: true; isReadonly: true }
        Property { name: "states"; type: "QQuickState"; isList: true; isReadonly: true }
        Property { name: "transitions"; type: "QQuickTransition"; isList: true; isReadonly: true }
        Property { name: "state"; type: "string" }
        Property { name: "childrenRect"; type: "QRectF"; isReadonly: true }
        Property { name: "anchors"; type: "QQuickAnchors"; isReadonly: true; isPointer: true }
        Property { name: "left"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "right"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "horizontalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "top"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "bottom"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "verticalCenter"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baseline"; type: "QQuickAnchorLine"; isReadonly: true }
        Property { name: "baselineOffset"; type: "double" }
        Property { name: "clip"; type: "bool" }
        Property { name: "focus"; type: "bool" }
        Property { name: "activeFocus"; type: "bool"; isReadonly: true }
        Property { name: "activeFocusOnTab"; revision: 1; type: "bool" }
        Property { name: "rotation"; type: "double" }
        Property { name: "scale"; type: "double" }
        Property { name: "transformOrigin"; type: "TransformOrigin" }
        Property { name: "transformOriginPoint"; type: "QPointF"; isReadonly: true }
        Property { name: "transform"; type: "QQuickTransform"; isList: true; isReadonly: true }
        Property { name: "smooth"; type: "bool" }
        Property { name: "antialiasing"; type: "bool" }
        Property { name: "implicitWidth"; type: "double" }
        Property { name: "implicitHeight"; type: "double" }
        Property { name: "layer"; type: "QQuickItemLayer"; isReadonly: true; isPointer: true }
        Signal {
            name: "childrenRectChanged"
            Parameter { type: "QRectF" }
        }
        Signal {
            name: "baselineOffsetChanged"
            Parameter { type: "double" }
        }
        Signal {
            name: "stateChanged"
            Parameter { type: "string" }
        }
        Signal {
            name: "focusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "activeFocusOnTabChanged"
            revision: 1
            Parameter { type: "bool" }
        }
        Signal {
            name: "parentChanged"
            Parameter { type: "QQuickItem"; isPointer: true }
        }
        Signal {
            name: "transformOriginChanged"
            Parameter { type: "TransformOrigin" }
        }
        Signal {
            name: "smoothChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "antialiasingChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "clipChanged"
            Parameter { type: "bool" }
        }
        Signal {
            name: "windowChanged"
            revision: 1
            Parameter { name: "window"; type: "QQuickWindow"; isPointer: true }
        }
        Method { name: "update" }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
            Parameter { name: "targetSize"; type: "QSize" }
        }
        Method {
            name: "grabToImage"
            revision: 2
            type: "bool"
            Parameter { name: "callback"; type: "QJSValue" }
        }
        Method {
            name: "contains"
            type: "bool"
            Parameter { name: "point"; type: "QPointF" }
        }
        Method {
            name: "mapFromItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method {
            name: "mapToItem"
            Parameter { type: "QQmlV4Function"; isPointer: true }
        }
        Method { name: "forceActiveFocus" }
        Method {
            name: "forceActiveFocus"
            Parameter { name: "reason"; type: "Qt::FocusReason" }
        }
        Method {
            name: "nextItemInFocusChain"
            revision: 1
            type: "QQuickItem*"
            Parameter { name: "forward"; type: "bool" }
        }
        Method { name: "nextItemInFocusChain"; revision: 1; type: "QQuickItem*" }
        Method {
            name: "childAt"
            type: "QQuickItem*"
            Parameter { name: "x"; type: "double" }
            Parameter { name: "y"; type: "double" }
        }
    }
}
